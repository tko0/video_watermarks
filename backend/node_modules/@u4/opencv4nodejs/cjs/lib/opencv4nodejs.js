"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CV_16FC4 = exports.CV_16FC3 = exports.CV_16FC2 = exports.CV_16FC1 = exports.CV_64FC4 = exports.CV_64FC3 = exports.CV_64FC2 = exports.CV_64FC1 = exports.CV_32FC4 = exports.CV_32FC3 = exports.CV_32FC2 = exports.CV_32FC1 = exports.CV_32SC4 = exports.CV_32SC3 = exports.CV_32SC2 = exports.CV_32SC1 = exports.CV_16SC4 = exports.CV_16SC3 = exports.CV_16SC2 = exports.CV_16SC1 = exports.CV_16UC4 = exports.CV_16UC3 = exports.CV_16UC2 = exports.CV_16UC1 = exports.CV_8SC4 = exports.CV_8SC3 = exports.CV_8SC2 = exports.CV_8SC1 = exports.CV_8UC4 = exports.CV_8UC3 = exports.CV_8UC2 = exports.CV_8UC1 = exports.CV_16F = exports.CV_64F = exports.CV_32F = exports.CV_32S = exports.CV_16S = exports.CV_16U = exports.CV_8S = exports.CV_8U = exports.xmodules = exports.modules = exports.version = exports.getMemMetrics = exports.dangerousDisableCustomMatAllocator = exports.dangerousEnableCustomMatAllocator = exports.isCustomMatAllocatorEnabled = exports.cv = exports.getRequire = exports.getDirName = void 0;
exports.HistAxes = exports.TermCriteria = exports.RotatedRect = exports.Rect = exports.Size = exports.Vec6 = exports.Vec4 = exports.Vec3 = exports.Vec2 = exports.Vec = exports.Point3 = exports.Point2 = exports.Point = exports.Mat = exports.BORDER_DEFAULT = exports.BORDER_ISOLATED = exports.BORDER_TRANSPARENT = exports.BORDER_REFLECT_101 = exports.BORDER_WRAP = exports.BORDER_REFLECT = exports.BORDER_REPLICATE = exports.BORDER_CONSTANT = exports.DECOMP_NORMAL = exports.DECOMP_QR = exports.DECOMP_SVD = exports.DECOMP_EIG = exports.DECOMP_CHOLESKY = exports.DECOMP_LU = exports.ROTATE_90_COUNTERCLOCKWISE = exports.ROTATE_180 = exports.ROTATE_90_CLOCKWISE = exports.REDUCE_MIN = exports.REDUCE_MAX = exports.REDUCE_AVG = exports.REDUCE_SUM = exports.lbpCascades = exports.haarCascades = exports.termCriteria = exports.KMEANS_USE_INITIAL_LABELS = exports.KMEANS_PP_CENTERS = exports.KMEANS_RANDOM_CENTERS = exports.NORM_MINMAX = exports.NORM_RELATIVE = exports.NORM_TYPE_MASK = exports.NORM_HAMMING2 = exports.NORM_HAMMING = exports.NORM_L2SQR = exports.NORM_L2 = exports.NORM_L1 = exports.NORM_INF = void 0;
exports.getVersionMinor = exports.getVersionMajor = exports.getTickCount = exports.getTickFrequency = exports.magnitudeAsync = exports.magnitude = exports.solveAsync = exports.solve = exports.maxAsync = exports.max = exports.minAsync = exports.min = exports.eigenAsync = exports.eigen = exports.reduceAsync = exports.reduce = exports.meanStdDevAsync = exports.meanStdDev = exports.meanAsync = exports.mean = exports.sumAsync = exports.sum = exports.convertScaleAbsAsync = exports.convertScaleAbs = exports.perspectiveTransformAsync = exports.perspectiveTransform = exports.transformAsync = exports.transform = exports.mulSpectrumsAsync = exports.mulSpectrums = exports.splitAsync = exports.split = exports.countNonZeroAsync = exports.countNonZero = exports.findNonZeroAsync = exports.findNonZero = exports.minMaxLocAsync = exports.minMaxLoc = exports.addWeightedAsync = exports.addWeighted = exports.getThreadNum = exports.setNumThreads = exports.getNumThreads = exports.polarToCartAsync = exports.polarToCart = exports.cartToPolarAsync = exports.cartToPolar = exports.kmeans = exports.partition = exports.getBuildInformation = void 0;
exports.moveWindow = exports.setWindowTitle = exports.getWindowProperty = exports.setWindowProperty = exports.QT_NEW_BUTTONBAR = exports.QT_RADIOBOX = exports.QT_CHECKBOX = exports.QT_PUSH_BUTTON = exports.QT_STYLE_OBLIQUE = exports.QT_STYLE_ITALIC = exports.QT_STYLE_NORMAL = exports.QT_FONT_BLACK = exports.QT_FONT_BOLD = exports.QT_FONT_DEMIBOLD = exports.QT_FONT_NORMAL = exports.QT_FONT_LIGHT = exports.EVENT_FLAG_ALTKEY = exports.EVENT_FLAG_SHIFTKEY = exports.EVENT_FLAG_CTRLKEY = exports.EVENT_FLAG_MBUTTON = exports.EVENT_FLAG_RBUTTON = exports.EVENT_FLAG_LBUTTON = exports.EVENT_MOUSEHWHEEL = exports.EVENT_MOUSEWHEEL = exports.EVENT_MBUTTONDBLCLK = exports.EVENT_RBUTTONDBLCLK = exports.EVENT_LBUTTONDBLCLK = exports.EVENT_MBUTTONUP = exports.EVENT_RBUTTONUP = exports.EVENT_LBUTTONUP = exports.EVENT_MBUTTONDOWN = exports.EVENT_RBUTTONDOWN = exports.EVENT_LBUTTONDOWN = exports.EVENT_MOUSEMOVE = exports.WND_PROP_VSYNC = exports.WND_PROP_TOPMOST = exports.WND_PROP_VISIBLE = exports.WND_PROP_OPENGL = exports.WND_PROP_ASPECT_RATIO = exports.WND_PROP_AUTOSIZE = exports.WND_PROP_FULLSCREEN = exports.WINDOW_GUI_NORMAL = exports.WINDOW_GUI_EXPANDED = exports.WINDOW_KEEPRATIO = exports.WINDOW_FREERATIO = exports.WINDOW_FULLSCREEN = exports.WINDOW_OPENGL = exports.WINDOW_AUTOSIZE = exports.WINDOW_NORMAL = exports.getVersionRevision = void 0;
exports.composeRT = exports.findHomographyAsync = exports.findHomography = exports.FM_RANSAC = exports.FM_LMEDS = exports.FM_8POINT = exports.FM_7POINT = exports.CALIB_FIX_TANGENT_DIST = exports.SOLVEPNP_MAX_COUNT = exports.SOLVEPNP_AP3P = exports.CALIB_USE_QR = exports.CALIB_USE_LU = exports.CALIB_FIX_TAUX_TAUY = exports.CALIB_TILTED_MODEL = exports.CALIB_ZERO_DISPARITY = exports.CALIB_SAME_FOCAL_LENGTH = exports.CALIB_FIX_INTRINSIC = exports.CALIB_FIX_S1_S2_S3_S4 = exports.CALIB_THIN_PRISM_MODEL = exports.CALIB_RATIONAL_MODEL = exports.CALIB_FIX_K6 = exports.CALIB_FIX_K5 = exports.CALIB_FIX_K4 = exports.CALIB_FIX_K3 = exports.CALIB_FIX_K2 = exports.CALIB_FIX_K1 = exports.CALIB_FIX_FOCAL_LENGTH = exports.CALIB_ZERO_TANGENT_DIST = exports.CALIB_FIX_PRINCIPAL_POINT = exports.CALIB_FIX_ASPECT_RATIO = exports.CALIB_USE_INTRINSIC_GUESS = exports.CALIB_CB_CLUSTERING = exports.CALIB_CB_ASYMMETRIC_GRID = exports.CALIB_CB_SYMMETRIC_GRID = exports.CALIB_CB_FAST_CHECK = exports.CALIB_CB_FILTER_QUADS = exports.CALIB_CB_NORMALIZE_IMAGE = exports.CALIB_CB_ADAPTIVE_THRESH = exports.SOLVEPNP_UPNP = exports.SOLVEPNP_DLS = exports.SOLVEPNP_P3P = exports.SOLVEPNP_EPNP = exports.SOLVEPNP_ITERATIVE = exports.RHO = exports.RANSAC = exports.LMEDS = exports.REGULAR = exports.startWindowThread = exports.resizeWindow = exports.namedWindow = void 0;
exports.DNN_TARGET_HDDL = exports.DNN_TARGET_CUDA_FP16 = exports.DNN_TARGET_CUDA = exports.DNN_TARGET_MYRIAD = exports.DNN_TARGET_OPENCL_FP16 = exports.DNN_TARGET_OPENCL = exports.DNN_TARGET_CPU = exports.DNN_BACKEND_CUDA = exports.DNN_BACKEND_HALIDE = exports.DNN_BACKEND_INFERENCE_ENGINE = exports.DNN_BACKEND_OPENCV = exports.undistortPointsAsync = exports.undistortPoints = exports.solveP3PAsync = exports.solveP3P = exports.estimateAffinePartial2DAsync = exports.estimateAffinePartial2D = exports.estimateAffine2DAsync = exports.estimateAffine2D = exports.calibrateCameraExtendedAsync = exports.calibrateCameraExtended = exports.calibrateCameraAsync = exports.calibrateCamera = exports.sampsonDistanceAsync = exports.sampsonDistance = exports.estimateAffine3DAsync = exports.estimateAffine3D = exports.getValidDisparityROIAsync = exports.getValidDisparityROI = exports.computeCorrespondEpilinesAsync = exports.computeCorrespondEpilines = exports.recoverPoseAsync = exports.recoverPose = exports.findEssentialMatAsync = exports.findEssentialMat = exports.findFundamentalMatAsync = exports.findFundamentalMat = exports.stereoRectifyUncalibratedAsync = exports.stereoRectifyUncalibrated = exports.stereoCalibrateAsync = exports.stereoCalibrate = exports.initCameraMatrix2DAsync = exports.initCameraMatrix2D = exports.projectPointsAsync = exports.projectPoints = exports.solvePnPRansacAsync = exports.solvePnPRansac = exports.solvePnPAsync = exports.solvePnP = exports.composeRTAsync = void 0;
exports.matchKnnBruteForceHammingLutAsync = exports.matchKnnBruteForceSL2 = exports.matchKnnBruteForceHammingLut = exports.matchKnnBruteForceHammingAsync = exports.matchKnnBruteForceL1Async = exports.matchKnnBruteForceAsync = exports.matchKnnFlannBasedAsync = exports.matchKnnBruteForceHamming = exports.matchKnnBruteForceL1 = exports.matchKnnBruteForce = exports.matchKnnFlannBased = exports.matchBruteForceSL2Async = exports.matchBruteForceHammingLutAsync = exports.matchBruteForceSL2 = exports.matchBruteForceHammingLut = exports.matchBruteForceHammingAsync = exports.matchBruteForceL1Async = exports.matchBruteForceAsync = exports.matchFlannBasedAsync = exports.matchBruteForceHamming = exports.matchBruteForceL1 = exports.matchBruteForce = exports.matchFlannBased = exports.DescriptorMatch = exports.KeyPointMatch = exports.KeyPoint = exports.FacemarkLBFParams = exports.FacemarkLBF = exports.FacemarkAAMParams = exports.FacemarkAAMData = exports.FacemarkAAM = exports.LBPHFaceRecognizer = exports.FisherFaceRecognizer = exports.EigenFaceRecognizer = exports.readNetAsync = exports.readNet = exports.readNetFromONNXAsync = exports.readNetFromONNX = exports.NMSBoxes = exports.readNetFromDarknetAsync = exports.readNetFromDarknet = exports.blobFromImagesAsync = exports.blobFromImages = exports.blobFromImageAsync = exports.blobFromImage = exports.readNetFromCaffeAsync = exports.readNetFromCaffe = exports.readNetFromTensorflowAsync = exports.readNetFromTensorflow = exports.Net = void 0;
exports.GC_BGD = exports.ADAPTIVE_THRESH_GAUSSIAN_C = exports.ADAPTIVE_THRESH_MEAN_C = exports.THRESH_TRIANGLE = exports.THRESH_OTSU = exports.THRESH_MASK = exports.THRESH_TOZERO_INV = exports.THRESH_TOZERO = exports.THRESH_TRUNC = exports.THRESH_BINARY_INV = exports.THRESH_BINARY = exports.WARP_INVERSE_MAP = exports.WARP_FILL_OUTLIERS = exports.INTER_LINEAR_EXACT = exports.INTER_MAX = exports.INTER_LANCZOS4 = exports.INTER_AREA = exports.INTER_CUBIC = exports.INTER_LINEAR = exports.INTER_NEAREST = exports.MORPH_HITMISS = exports.MORPH_BLACKHAT = exports.MORPH_TOPHAT = exports.MORPH_GRADIENT = exports.MORPH_CLOSE = exports.MORPH_OPEN = exports.MORPH_DILATE = exports.MORPH_ERODE = exports.MORPH_ELLIPSE = exports.MORPH_CROSS = exports.MORPH_RECT = exports.drawMatches = exports.drawKeyPoints = exports.SimpleBlobDetector = exports.SimpleBlobDetectorParams = exports.ORBScoreType = exports.ORBDetector = exports.MSERDetector = exports.KAZEDiffusivityType = exports.KAZEDetector = exports.GFTTDetector = exports.FASTDetectorType = exports.FASTDetector = exports.BFMatcher = exports.BRISKDetector = exports.AKAZEDescriptorType = exports.AKAZEDetector = exports.AGASTDetectorType = exports.AGASTDetector = exports.matchKnnBruteForceSL2Async = void 0;
exports.COLOR_GRAY2RGBA = exports.COLOR_GRAY2BGRA = exports.COLOR_GRAY2RGB = exports.COLOR_GRAY2BGR = exports.COLOR_RGB2GRAY = exports.COLOR_BGR2GRAY = exports.COLOR_RGBA2BGRA = exports.COLOR_BGRA2RGBA = exports.COLOR_RGB2BGR = exports.COLOR_BGR2RGB = exports.COLOR_BGRA2RGB = exports.COLOR_RGBA2BGR = exports.COLOR_RGB2BGRA = exports.COLOR_BGR2RGBA = exports.COLOR_RGBA2RGB = exports.COLOR_BGRA2BGR = exports.COLOR_RGB2RGBA = exports.COLOR_BGR2BGRA = exports.FLOODFILL_MASK_ONLY = exports.FLOODFILL_FIXED_RANGE = exports.HISTCMP_KL_DIV = exports.HISTCMP_CHISQR_ALT = exports.HISTCMP_HELLINGER = exports.HISTCMP_BHATTACHARYYA = exports.HISTCMP_INTERSECT = exports.HISTCMP_CHISQR = exports.HISTCMP_CORREL = exports.HOUGH_GRADIENT = exports.HOUGH_MULTI_SCALE = exports.HOUGH_PROBABILISTIC = exports.HOUGH_STANDARD = exports.DCT_ROWS = exports.DCT_INVERSE = exports.DFT_REAL_OUTPUT = exports.DFT_COMPLEX_OUTPUT = exports.DFT_ROWS = exports.DFT_SCALE = exports.DFT_INVERSE = exports.TM_CCOEFF_NORMED = exports.TM_CCOEFF = exports.TM_CCORR_NORMED = exports.TM_CCORR = exports.TM_SQDIFF_NORMED = exports.TM_SQDIFF = exports.GC_EVAL = exports.GC_INIT_WITH_MASK = exports.GC_INIT_WITH_RECT = exports.GC_PR_FGD = exports.GC_PR_BGD = exports.GC_FGD = void 0;
exports.COLOR_RGB2HLS_FULL = exports.COLOR_BGR2HLS_FULL = exports.COLOR_RGB2HSV_FULL = exports.COLOR_BGR2HSV_FULL = exports.COLOR_HLS2RGB = exports.COLOR_HLS2BGR = exports.COLOR_Luv2RGB = exports.COLOR_Luv2BGR = exports.COLOR_Lab2RGB = exports.COLOR_Lab2BGR = exports.COLOR_HSV2RGB = exports.COLOR_HSV2BGR = exports.COLOR_RGB2HLS = exports.COLOR_BGR2HLS = exports.COLOR_RGB2Luv = exports.COLOR_BGR2Luv = exports.COLOR_RGB2Lab = exports.COLOR_BGR2Lab = exports.COLOR_RGB2HSV = exports.COLOR_BGR2HSV = exports.COLOR_YCrCb2RGB = exports.COLOR_YCrCb2BGR = exports.COLOR_RGB2YCrCb = exports.COLOR_BGR2YCrCb = exports.COLOR_XYZ2RGB = exports.COLOR_XYZ2BGR = exports.COLOR_RGB2XYZ = exports.COLOR_BGR2XYZ = exports.COLOR_BGR5552GRAY = exports.COLOR_GRAY2BGR555 = exports.COLOR_BGR5552RGBA = exports.COLOR_BGR5552BGRA = exports.COLOR_RGBA2BGR555 = exports.COLOR_BGRA2BGR555 = exports.COLOR_BGR5552RGB = exports.COLOR_BGR5552BGR = exports.COLOR_RGB2BGR555 = exports.COLOR_BGR2BGR555 = exports.COLOR_BGR5652GRAY = exports.COLOR_GRAY2BGR565 = exports.COLOR_BGR5652RGBA = exports.COLOR_BGR5652BGRA = exports.COLOR_RGBA2BGR565 = exports.COLOR_BGRA2BGR565 = exports.COLOR_BGR5652RGB = exports.COLOR_BGR5652BGR = exports.COLOR_RGB2BGR565 = exports.COLOR_BGR2BGR565 = exports.COLOR_RGBA2GRAY = exports.COLOR_BGRA2GRAY = void 0;
exports.COLOR_YUV2GRAY_I420 = exports.COLOR_YUV2GRAY_IYUV = exports.COLOR_YUV2GRAY_YV12 = exports.COLOR_YUV2GRAY_NV12 = exports.COLOR_YUV2GRAY_NV21 = exports.COLOR_YUV2GRAY_420 = exports.COLOR_YUV420p2BGRA = exports.COLOR_YUV420p2RGBA = exports.COLOR_YUV2BGRA_I420 = exports.COLOR_YUV2RGBA_I420 = exports.COLOR_YUV2BGRA_IYUV = exports.COLOR_YUV2RGBA_IYUV = exports.COLOR_YUV2BGRA_YV12 = exports.COLOR_YUV2RGBA_YV12 = exports.COLOR_YUV420p2BGR = exports.COLOR_YUV420p2RGB = exports.COLOR_YUV2BGR_I420 = exports.COLOR_YUV2RGB_I420 = exports.COLOR_YUV2BGR_IYUV = exports.COLOR_YUV2RGB_IYUV = exports.COLOR_YUV2BGR_YV12 = exports.COLOR_YUV2RGB_YV12 = exports.COLOR_YUV420sp2BGRA = exports.COLOR_YUV420sp2RGBA = exports.COLOR_YUV2BGRA_NV21 = exports.COLOR_YUV2RGBA_NV21 = exports.COLOR_YUV2BGRA_NV12 = exports.COLOR_YUV2RGBA_NV12 = exports.COLOR_YUV420sp2BGR = exports.COLOR_YUV420sp2RGB = exports.COLOR_YUV2BGR_NV21 = exports.COLOR_YUV2RGB_NV21 = exports.COLOR_YUV2BGR_NV12 = exports.COLOR_YUV2RGB_NV12 = exports.COLOR_YUV2RGB = exports.COLOR_YUV2BGR = exports.COLOR_RGB2YUV = exports.COLOR_BGR2YUV = exports.COLOR_Luv2LRGB = exports.COLOR_Luv2LBGR = exports.COLOR_Lab2LRGB = exports.COLOR_Lab2LBGR = exports.COLOR_LRGB2Luv = exports.COLOR_LBGR2Luv = exports.COLOR_LRGB2Lab = exports.COLOR_LBGR2Lab = exports.COLOR_HLS2RGB_FULL = exports.COLOR_HLS2BGR_FULL = exports.COLOR_HSV2RGB_FULL = exports.COLOR_HSV2BGR_FULL = void 0;
exports.COLOR_RGBA2YUV_YV12 = exports.COLOR_BGR2YUV_YV12 = exports.COLOR_RGB2YUV_YV12 = exports.COLOR_BGRA2YUV_IYUV = exports.COLOR_RGBA2YUV_IYUV = exports.COLOR_BGRA2YUV_I420 = exports.COLOR_RGBA2YUV_I420 = exports.COLOR_BGR2YUV_IYUV = exports.COLOR_RGB2YUV_IYUV = exports.COLOR_BGR2YUV_I420 = exports.COLOR_RGB2YUV_I420 = exports.COLOR_mRGBA2RGBA = exports.COLOR_RGBA2mRGBA = exports.COLOR_YUV2GRAY_YUNV = exports.COLOR_YUV2GRAY_YUYV = exports.COLOR_YUV2GRAY_YVYU = exports.COLOR_YUV2GRAY_UYNV = exports.COLOR_YUV2GRAY_Y422 = exports.COLOR_YUV2GRAY_YUY2 = exports.COLOR_YUV2GRAY_UYVY = exports.COLOR_YUV2BGRA_YUNV = exports.COLOR_YUV2RGBA_YUNV = exports.COLOR_YUV2BGRA_YUYV = exports.COLOR_YUV2RGBA_YUYV = exports.COLOR_YUV2BGRA_YVYU = exports.COLOR_YUV2RGBA_YVYU = exports.COLOR_YUV2BGRA_YUY2 = exports.COLOR_YUV2RGBA_YUY2 = exports.COLOR_YUV2BGR_YUNV = exports.COLOR_YUV2RGB_YUNV = exports.COLOR_YUV2BGR_YUYV = exports.COLOR_YUV2RGB_YUYV = exports.COLOR_YUV2BGR_YVYU = exports.COLOR_YUV2RGB_YVYU = exports.COLOR_YUV2BGR_YUY2 = exports.COLOR_YUV2RGB_YUY2 = exports.COLOR_YUV2BGRA_UYNV = exports.COLOR_YUV2RGBA_UYNV = exports.COLOR_YUV2BGRA_Y422 = exports.COLOR_YUV2RGBA_Y422 = exports.COLOR_YUV2BGRA_UYVY = exports.COLOR_YUV2RGBA_UYVY = exports.COLOR_YUV2BGR_UYNV = exports.COLOR_YUV2RGB_UYNV = exports.COLOR_YUV2BGR_Y422 = exports.COLOR_YUV2RGB_Y422 = exports.COLOR_YUV2BGR_UYVY = exports.COLOR_YUV2RGB_UYVY = exports.COLOR_YUV420p2GRAY = exports.COLOR_YUV420sp2GRAY = void 0;
exports.DIST_MASK_5 = exports.DIST_MASK_3 = exports.DIST_HUBER = exports.DIST_WELSCH = exports.DIST_FAIR = exports.DIST_L12 = exports.DIST_C = exports.DIST_L2 = exports.DIST_L1 = exports.DIST_USER = exports.CHAIN_APPROX_TC89_KCOS = exports.CHAIN_APPROX_TC89_L1 = exports.CHAIN_APPROX_SIMPLE = exports.CHAIN_APPROX_NONE = exports.CC_STAT_MAX = exports.CC_STAT_AREA = exports.CC_STAT_HEIGHT = exports.CC_STAT_WIDTH = exports.CC_STAT_TOP = exports.CC_STAT_LEFT = exports.COLOR_COLORCVT_MAX = exports.COLOR_BayerGR2RGB_EA = exports.COLOR_BayerRG2RGB_EA = exports.COLOR_BayerGB2RGB_EA = exports.COLOR_BayerBG2RGB_EA = exports.COLOR_BayerGR2BGR_EA = exports.COLOR_BayerRG2BGR_EA = exports.COLOR_BayerGB2BGR_EA = exports.COLOR_BayerBG2BGR_EA = exports.COLOR_BayerGR2RGB_VNG = exports.COLOR_BayerRG2RGB_VNG = exports.COLOR_BayerGB2RGB_VNG = exports.COLOR_BayerBG2RGB_VNG = exports.COLOR_BayerGR2BGR_VNG = exports.COLOR_BayerRG2BGR_VNG = exports.COLOR_BayerGB2BGR_VNG = exports.COLOR_BayerBG2BGR_VNG = exports.COLOR_BayerGR2GRAY = exports.COLOR_BayerRG2GRAY = exports.COLOR_BayerGB2GRAY = exports.COLOR_BayerBG2GRAY = exports.COLOR_BayerGR2RGB = exports.COLOR_BayerRG2RGB = exports.COLOR_BayerGB2RGB = exports.COLOR_BayerBG2RGB = exports.COLOR_BayerGR2BGR = exports.COLOR_BayerRG2BGR = exports.COLOR_BayerGB2BGR = exports.COLOR_BayerBG2BGR = exports.COLOR_BGRA2YUV_YV12 = void 0;
exports.goodFeaturesToTrack = exports.cannyAsync = exports.canny = exports.applyColorMapAsync = exports.applyColorMap = exports.getTextSizeAsync = exports.getTextSize = exports.getPerspectiveTransform = exports.getAffineTransform = exports.fitLine = exports.plot1DHist = exports.getRotationMatrix2D = exports.getStructuringElement = exports.COLORMAP_PARULA = exports.COLORMAP_HOT = exports.COLORMAP_PINK = exports.COLORMAP_HSV = exports.COLORMAP_COOL = exports.COLORMAP_SPRING = exports.COLORMAP_SUMMER = exports.COLORMAP_OCEAN = exports.COLORMAP_RAINBOW = exports.COLORMAP_WINTER = exports.COLORMAP_JET = exports.COLORMAP_BONE = exports.COLORMAP_AUTUMN = exports.LINE_AA = exports.LINE_8 = exports.LINE_4 = exports.FILLED = exports.FONT_ITALIC = exports.FONT_HERSHEY_SCRIPT_COMPLEX = exports.FONT_HERSHEY_SCRIPT_SIMPLEX = exports.FONT_HERSHEY_COMPLEX_SMALL = exports.FONT_HERSHEY_TRIPLEX = exports.FONT_HERSHEY_COMPLEX = exports.FONT_HERSHEY_DUPLEX = exports.FONT_HERSHEY_PLAIN = exports.FONT_HERSHEY_SIMPLEX = exports.CONTOURS_MATCH_I3 = exports.CONTOURS_MATCH_I2 = exports.CONTOURS_MATCH_I1 = exports.RETR_FLOODFILL = exports.RETR_TREE = exports.RETR_CCOMP = exports.RETR_LIST = exports.RETR_EXTERNAL = exports.DIST_LABEL_PIXEL = exports.DIST_LABEL_CCOMP = exports.DIST_MASK_PRECISE = void 0;
exports.CAP_PROP_ISO_SPEED = exports.CAP_PROP_GUID = exports.CAP_PROP_FOCUS = exports.CAP_PROP_ZOOM = exports.CAP_PROP_WHITE_BALANCE_RED_V = exports.CAP_PROP_TRIGGER_DELAY = exports.CAP_PROP_TRIGGER = exports.CAP_PROP_TEMPERATURE = exports.CAP_PROP_GAMMA = exports.CAP_PROP_AUTO_EXPOSURE = exports.CAP_PROP_SHARPNESS = exports.CAP_PROP_MONOCHROME = exports.CAP_PROP_RECTIFICATION = exports.CAP_PROP_WHITE_BALANCE_BLUE_U = exports.CAP_PROP_CONVERT_RGB = exports.CAP_PROP_EXPOSURE = exports.CAP_PROP_GAIN = exports.CAP_PROP_HUE = exports.CAP_PROP_SATURATION = exports.CAP_PROP_CONTRAST = exports.CAP_PROP_BRIGHTNESS = exports.CAP_PROP_MODE = exports.CAP_PROP_FORMAT = exports.CAP_PROP_FRAME_COUNT = exports.CAP_PROP_FOURCC = exports.CAP_PROP_FPS = exports.CAP_PROP_FRAME_HEIGHT = exports.CAP_PROP_FRAME_WIDTH = exports.CAP_PROP_POS_AVI_RATIO = exports.CAP_PROP_POS_FRAMES = exports.CAP_PROP_POS_MSEC = exports.Contour = exports.Moments = exports.calcHistAsync = exports.calcHist = exports.accumulateWeightedAsync = exports.accumulateWeighted = exports.accumulateSquareAsync = exports.accumulateSquare = exports.accumulateProductAsync = exports.accumulateProduct = exports.accumulateAsync = exports.accumulate = exports.medianBlurAsync = exports.medianBlur = exports.gaussianBlurAsync = exports.gaussianBlur = exports.blurAsync = exports.blur = exports.goodFeaturesToTrackAsync = void 0;
exports.destroyWindow = exports.imdecode = exports.imencode = exports.waitKeyEx = exports.waitKey = exports.imwrite = exports.imshowWait = exports.imshow = exports.imread = exports.VideoWriter = exports.VideoCapture = exports.VIDEOWRITER_PROP_NSTRIPES = exports.VIDEOWRITER_PROP_FRAMEBYTES = exports.VIDEOWRITER_PROP_QUALITY = exports.CAP_ARAVIS = exports.CAP_IMAGES = exports.CAP_FFMPEG = exports.CAP_GSTREAMER = exports.CAP_GPHOTO2 = exports.CAP_OPENNI2_ASUS = exports.CAP_OPENNI2 = exports.CAP_INTELPERC = exports.CAP_WINRT = exports.CAP_MSMF = exports.CAP_GIGANETIX = exports.CAP_AVFOUNDATION = exports.CAP_XIAPI = exports.CAP_ANDROID = exports.CAP_OPENNI_ASUS = exports.CAP_OPENNI = exports.CAP_PVAPI = exports.CAP_DSHOW = exports.CAP_UNICAP = exports.CAP_QT = exports.CAP_CMU1394 = exports.CAP_DC1394 = exports.CAP_IEEE1394 = exports.CAP_FIREWIRE = exports.CAP_V4L2 = exports.CAP_V4L = exports.CAP_VFW = exports.CAP_ANY = exports.CAP_PROP_AUTOFOCUS = exports.CAP_PROP_BUFFERSIZE = exports.CAP_PROP_SETTINGS = exports.CAP_PROP_IRIS = exports.CAP_PROP_ROLL = exports.CAP_PROP_TILT = exports.CAP_PROP_PAN = exports.CAP_PROP_BACKLIGHT = void 0;
exports.HOGHistogramNormType = exports.HOGDescriptor = exports.CascadeClassifier = exports.SVM = exports.StatModel = exports.ParamGrid = exports.TrainData = exports.statModel = exports.ml = exports.IMWRITE_PNG_STRATEGY_FIXED = exports.IMWRITE_PNG_STRATEGY_RLE = exports.IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = exports.IMWRITE_PNG_STRATEGY_FILTERED = exports.IMWRITE_PNG_STRATEGY_DEFAULT = exports.IMWRITE_PAM_FORMAT_RGB_ALPHA = exports.IMWRITE_PAM_FORMAT_RGB = exports.IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA = exports.IMWRITE_PAM_FORMAT_GRAYSCALE = exports.IMWRITE_PAM_FORMAT_BLACKANDWHITE = exports.IMWRITE_PAM_FORMAT_NULL = exports.IMWRITE_PAM_TUPLETYPE = exports.IMREAD_IGNORE_ORIENTATION = exports.IMREAD_REDUCED_COLOR_8 = exports.IMREAD_REDUCED_GRAYSCALE_8 = exports.IMREAD_REDUCED_COLOR_4 = exports.IMREAD_REDUCED_GRAYSCALE_4 = exports.IMREAD_REDUCED_COLOR_2 = exports.IMREAD_REDUCED_GRAYSCALE_2 = exports.IMWRITE_WEBP_QUALITY = exports.IMWRITE_PXM_BINARY = exports.IMWRITE_PNG_BILEVEL = exports.IMWRITE_PNG_STRATEGY = exports.IMWRITE_PNG_COMPRESSION = exports.IMWRITE_JPEG_CHROMA_QUALITY = exports.IMWRITE_JPEG_LUMA_QUALITY = exports.IMWRITE_JPEG_RST_INTERVAL = exports.IMWRITE_JPEG_OPTIMIZE = exports.IMWRITE_JPEG_PROGRESSIVE = exports.IMWRITE_JPEG_QUALITY = exports.IMREAD_LOAD_GDAL = exports.IMREAD_ANYCOLOR = exports.IMREAD_ANYDEPTH = exports.IMREAD_COLOR = exports.IMREAD_GRAYSCALE = exports.IMREAD_UNCHANGED = exports.imdecodeAsync = exports.imencodeAsync = exports.imwriteAsync = exports.imreadAsync = exports.destroyAllWindows = void 0;
exports.HAAR_FRONTALFACE_ALT2 = exports.HAAR_FRONTALFACE_ALT = exports.HAAR_FRONTALCATFACE_EXTENDED = exports.HAAR_FRONTALCATFACE = exports.HAAR_EYE_TREE_EYEGLASSES = exports.HAAR_EYE = exports.PHash = exports.SLICO = exports.SLIC = exports.SuperpixelLSC = exports.SuperpixelSLIC = exports.SuperpixelSEEDS = exports.SURFDetector = exports.SIFTDetector = exports.BackgroundSubtractorKNN = exports.BackgroundSubtractorMOG2 = exports.TrackerCSRT = exports.TrackerCSRTParams = exports.TrackerMOSSE = exports.TrackerGOTURN = exports.trackerKCFModes = exports.MultiTracker = exports.TrackerKCF = exports.TrackerKCFParams = exports.TrackerTLD = exports.TrackerMIL = exports.TrackerMILParams = exports.TrackerMedianFlow = exports.TrackerBoosting = exports.TrackerBoostingParams = exports.createOCRHMMTransitionsTableAsync = exports.createOCRHMMTransitionsTable = exports.loadOCRHMMClassifierCNNAsync = exports.loadOCRHMMClassifierCNN = exports.loadOCRHMMClassifierNMAsync = exports.loadOCRHMMClassifierNM = exports.OCRHMMClassifier = exports.OCRHMMDecoder = exports.seamlessCloneAsync = exports.seamlessClone = exports.inpaintAsync = exports.inpaint = exports.fastNlMeansDenoisingColoredAsync = exports.fastNlMeansDenoisingColored = exports.MONOCHROME_TRANSFER = exports.MIXED_CLONE = exports.NORMAL_CLONE = exports.INPAINT_TELEA = exports.INPAINT_NS = exports.DetectionROI = void 0;
exports.ORB = exports.FAST = exports.KAZE = exports.AKAZE = exports.AGAST = exports.dropOverlappingZone = exports.getScoreMax = exports.toMatTypeName = exports.getVersionString = exports.getVersion = exports.drawDetection = exports.drawTextBox = exports.LBP_SILVERWARE = exports.LBP_PROFILEFACE = exports.LBP_FRONTALFACE_IMPROVED = exports.LBP_FRONTALFACE = exports.LBP_FRONTALCATFACE = exports.HAAR_UPPERBODY = exports.HAAR_SMILE = exports.HAAR_RUSSIAN_PLATE_NUMBER = exports.HAAR_RIGHTEYE_2SPLITS = exports.HAAR_PROFILEFACE = exports.HAAR_LOWERBODY = exports.HAAR_LICENCE_PLATE_RUS_16STAGES = exports.HAAR_LEFTEYE_2SPLITS = exports.HAAR_FULLBODY = exports.HAAR_FRONTALFACE_DEFAULT = exports.HAAR_FRONTALFACE_ALT_TREE = void 0;
const node_path_1 = __importDefault(require("node:path"));
const promisify_js_1 = __importDefault(require("./promisify.js"));
const index_js_1 = __importDefault(require("./ext/index.js"));
const cvloader_js_1 = require("./cvloader.js");
const meta_js_1 = require("./meta.js");
const commons_js_1 = require("./commons.js");
var meta_js_2 = require("./meta.js");
Object.defineProperty(exports, "getDirName", { enumerable: true, get: function () { return meta_js_2.getDirName; } });
Object.defineProperty(exports, "getRequire", { enumerable: true, get: function () { return meta_js_2.getRequire; } });
function loadOpenCV(opt) {
    // load native binding
    const cvBase = (0, cvloader_js_1.getOpenCV)(opt);
    // check the presence of any expected symbol, to ensure the library is loaded
    if (!cvBase.accumulate) {
        throw Error('failed to load opencv basic accumulate not found.');
    }
    if (!cvBase.blur) {
        throw Error('failed to load opencv basic blur not found.');
    }
    // resolve haarcascade and lbpCascades files paths
    const { haarCascades, lbpCascades } = cvBase;
    const dirname = (0, meta_js_1.getDirName)();
    const xmlDir = node_path_1.default.join(dirname, '..', '..', 'src', 'lib');
    Object.keys(haarCascades).forEach(key => cvBase[key] = (0, commons_js_1.resolvePath)(node_path_1.default.join(xmlDir, 'haarcascades'), haarCascades[key]));
    Object.keys(lbpCascades).forEach(key => cvBase[key] = (0, commons_js_1.resolvePath)(node_path_1.default.join(xmlDir, 'lbpcascades'), lbpCascades[key]));
    // promisify async methods
    let cvObj = (0, promisify_js_1.default)(cvBase);
    cvObj = (0, index_js_1.default)(cvObj);
    // add xmodules alias if not present (moved to C++ part)
    // if (!cvObj.xmodules && cvObj.modules)
    //  cvObj.xmodules = cvObj.modules
    return cvObj;
}
exports.cv = loadOpenCV({ prebuild: 'latestBuild' });
function dumpExports() {
    let allExports = Object.keys(exports.cv);
    allExports = allExports.filter(key => !key.includes('"'));
    console.log('\n\n');
    while (allExports.length) {
        const keys = allExports.splice(0, 15);
        console.log(`const { ${keys} } = cv;`);
        console.log(`export { ${keys} };`);
    }
    console.log('\n\n');
}
// dumpExports();
//////////////
//// GENERATED code
const { isCustomMatAllocatorEnabled, dangerousEnableCustomMatAllocator, dangerousDisableCustomMatAllocator, getMemMetrics, version, modules, xmodules, CV_8U, CV_8S, CV_16U, CV_16S, CV_32S, CV_32F, CV_64F, CV_16F } = exports.cv;
exports.isCustomMatAllocatorEnabled = isCustomMatAllocatorEnabled;
exports.dangerousEnableCustomMatAllocator = dangerousEnableCustomMatAllocator;
exports.dangerousDisableCustomMatAllocator = dangerousDisableCustomMatAllocator;
exports.getMemMetrics = getMemMetrics;
exports.version = version;
exports.modules = modules;
exports.xmodules = xmodules;
exports.CV_8U = CV_8U;
exports.CV_8S = CV_8S;
exports.CV_16U = CV_16U;
exports.CV_16S = CV_16S;
exports.CV_32S = CV_32S;
exports.CV_32F = CV_32F;
exports.CV_64F = CV_64F;
exports.CV_16F = CV_16F;
const { CV_8UC1, CV_8UC2, CV_8UC3, CV_8UC4, CV_8SC1, CV_8SC2, CV_8SC3, CV_8SC4, CV_16UC1, CV_16UC2, CV_16UC3, CV_16UC4, CV_16SC1, CV_16SC2, CV_16SC3 } = exports.cv;
exports.CV_8UC1 = CV_8UC1;
exports.CV_8UC2 = CV_8UC2;
exports.CV_8UC3 = CV_8UC3;
exports.CV_8UC4 = CV_8UC4;
exports.CV_8SC1 = CV_8SC1;
exports.CV_8SC2 = CV_8SC2;
exports.CV_8SC3 = CV_8SC3;
exports.CV_8SC4 = CV_8SC4;
exports.CV_16UC1 = CV_16UC1;
exports.CV_16UC2 = CV_16UC2;
exports.CV_16UC3 = CV_16UC3;
exports.CV_16UC4 = CV_16UC4;
exports.CV_16SC1 = CV_16SC1;
exports.CV_16SC2 = CV_16SC2;
exports.CV_16SC3 = CV_16SC3;
const { CV_16SC4, CV_32SC1, CV_32SC2, CV_32SC3, CV_32SC4, CV_32FC1, CV_32FC2, CV_32FC3, CV_32FC4, CV_64FC1, CV_64FC2, CV_64FC3, CV_64FC4, CV_16FC1, CV_16FC2 } = exports.cv;
exports.CV_16SC4 = CV_16SC4;
exports.CV_32SC1 = CV_32SC1;
exports.CV_32SC2 = CV_32SC2;
exports.CV_32SC3 = CV_32SC3;
exports.CV_32SC4 = CV_32SC4;
exports.CV_32FC1 = CV_32FC1;
exports.CV_32FC2 = CV_32FC2;
exports.CV_32FC3 = CV_32FC3;
exports.CV_32FC4 = CV_32FC4;
exports.CV_64FC1 = CV_64FC1;
exports.CV_64FC2 = CV_64FC2;
exports.CV_64FC3 = CV_64FC3;
exports.CV_64FC4 = CV_64FC4;
exports.CV_16FC1 = CV_16FC1;
exports.CV_16FC2 = CV_16FC2;
const { CV_16FC3, CV_16FC4, NORM_INF, NORM_L1, NORM_L2, NORM_L2SQR, NORM_HAMMING, NORM_HAMMING2, NORM_TYPE_MASK, NORM_RELATIVE, NORM_MINMAX, KMEANS_RANDOM_CENTERS, KMEANS_PP_CENTERS, KMEANS_USE_INITIAL_LABELS, termCriteria } = exports.cv;
exports.CV_16FC3 = CV_16FC3;
exports.CV_16FC4 = CV_16FC4;
exports.NORM_INF = NORM_INF;
exports.NORM_L1 = NORM_L1;
exports.NORM_L2 = NORM_L2;
exports.NORM_L2SQR = NORM_L2SQR;
exports.NORM_HAMMING = NORM_HAMMING;
exports.NORM_HAMMING2 = NORM_HAMMING2;
exports.NORM_TYPE_MASK = NORM_TYPE_MASK;
exports.NORM_RELATIVE = NORM_RELATIVE;
exports.NORM_MINMAX = NORM_MINMAX;
exports.KMEANS_RANDOM_CENTERS = KMEANS_RANDOM_CENTERS;
exports.KMEANS_PP_CENTERS = KMEANS_PP_CENTERS;
exports.KMEANS_USE_INITIAL_LABELS = KMEANS_USE_INITIAL_LABELS;
exports.termCriteria = termCriteria;
const { haarCascades, lbpCascades, REDUCE_SUM, REDUCE_AVG, REDUCE_MAX, REDUCE_MIN, ROTATE_90_CLOCKWISE, ROTATE_180, ROTATE_90_COUNTERCLOCKWISE, DECOMP_LU, DECOMP_CHOLESKY, DECOMP_EIG, DECOMP_SVD, DECOMP_QR, DECOMP_NORMAL } = exports.cv;
exports.haarCascades = haarCascades;
exports.lbpCascades = lbpCascades;
exports.REDUCE_SUM = REDUCE_SUM;
exports.REDUCE_AVG = REDUCE_AVG;
exports.REDUCE_MAX = REDUCE_MAX;
exports.REDUCE_MIN = REDUCE_MIN;
exports.ROTATE_90_CLOCKWISE = ROTATE_90_CLOCKWISE;
exports.ROTATE_180 = ROTATE_180;
exports.ROTATE_90_COUNTERCLOCKWISE = ROTATE_90_COUNTERCLOCKWISE;
exports.DECOMP_LU = DECOMP_LU;
exports.DECOMP_CHOLESKY = DECOMP_CHOLESKY;
exports.DECOMP_EIG = DECOMP_EIG;
exports.DECOMP_SVD = DECOMP_SVD;
exports.DECOMP_QR = DECOMP_QR;
exports.DECOMP_NORMAL = DECOMP_NORMAL;
const { BORDER_CONSTANT, BORDER_REPLICATE, BORDER_REFLECT, BORDER_WRAP, BORDER_REFLECT_101, BORDER_TRANSPARENT, BORDER_ISOLATED, BORDER_DEFAULT, Mat, Point, Point2, Point3, Vec, Vec2, Vec3 } = exports.cv;
exports.BORDER_CONSTANT = BORDER_CONSTANT;
exports.BORDER_REPLICATE = BORDER_REPLICATE;
exports.BORDER_REFLECT = BORDER_REFLECT;
exports.BORDER_WRAP = BORDER_WRAP;
exports.BORDER_REFLECT_101 = BORDER_REFLECT_101;
exports.BORDER_TRANSPARENT = BORDER_TRANSPARENT;
exports.BORDER_ISOLATED = BORDER_ISOLATED;
exports.BORDER_DEFAULT = BORDER_DEFAULT;
exports.Mat = Mat;
exports.Point = Point;
exports.Point2 = Point2;
exports.Point3 = Point3;
exports.Vec = Vec;
exports.Vec2 = Vec2;
exports.Vec3 = Vec3;
const { Vec4, Vec6, Size, Rect, RotatedRect, TermCriteria, HistAxes, getBuildInformation, partition, kmeans, cartToPolar, cartToPolarAsync, polarToCart, polarToCartAsync, getNumThreads } = exports.cv;
exports.Vec4 = Vec4;
exports.Vec6 = Vec6;
exports.Size = Size;
exports.Rect = Rect;
exports.RotatedRect = RotatedRect;
exports.TermCriteria = TermCriteria;
exports.HistAxes = HistAxes;
exports.getBuildInformation = getBuildInformation;
exports.partition = partition;
exports.kmeans = kmeans;
exports.cartToPolar = cartToPolar;
exports.cartToPolarAsync = cartToPolarAsync;
exports.polarToCart = polarToCart;
exports.polarToCartAsync = polarToCartAsync;
exports.getNumThreads = getNumThreads;
const { setNumThreads, getThreadNum, addWeighted, addWeightedAsync, minMaxLoc, minMaxLocAsync, findNonZero, findNonZeroAsync, countNonZero, countNonZeroAsync, split, splitAsync, mulSpectrums, mulSpectrumsAsync, transform } = exports.cv;
exports.setNumThreads = setNumThreads;
exports.getThreadNum = getThreadNum;
exports.addWeighted = addWeighted;
exports.addWeightedAsync = addWeightedAsync;
exports.minMaxLoc = minMaxLoc;
exports.minMaxLocAsync = minMaxLocAsync;
exports.findNonZero = findNonZero;
exports.findNonZeroAsync = findNonZeroAsync;
exports.countNonZero = countNonZero;
exports.countNonZeroAsync = countNonZeroAsync;
exports.split = split;
exports.splitAsync = splitAsync;
exports.mulSpectrums = mulSpectrums;
exports.mulSpectrumsAsync = mulSpectrumsAsync;
exports.transform = transform;
const { transformAsync, perspectiveTransform, perspectiveTransformAsync, convertScaleAbs, convertScaleAbsAsync, sum, sumAsync, mean, meanAsync, meanStdDev, meanStdDevAsync, reduce, reduceAsync, eigen, eigenAsync } = exports.cv;
exports.transformAsync = transformAsync;
exports.perspectiveTransform = perspectiveTransform;
exports.perspectiveTransformAsync = perspectiveTransformAsync;
exports.convertScaleAbs = convertScaleAbs;
exports.convertScaleAbsAsync = convertScaleAbsAsync;
exports.sum = sum;
exports.sumAsync = sumAsync;
exports.mean = mean;
exports.meanAsync = meanAsync;
exports.meanStdDev = meanStdDev;
exports.meanStdDevAsync = meanStdDevAsync;
exports.reduce = reduce;
exports.reduceAsync = reduceAsync;
exports.eigen = eigen;
exports.eigenAsync = eigenAsync;
const { min, minAsync, max, maxAsync, solve, solveAsync, magnitude, magnitudeAsync, getTickFrequency, getTickCount, getVersionMajor, getVersionMinor, getVersionRevision, WINDOW_NORMAL, WINDOW_AUTOSIZE } = exports.cv;
exports.min = min;
exports.minAsync = minAsync;
exports.max = max;
exports.maxAsync = maxAsync;
exports.solve = solve;
exports.solveAsync = solveAsync;
exports.magnitude = magnitude;
exports.magnitudeAsync = magnitudeAsync;
exports.getTickFrequency = getTickFrequency;
exports.getTickCount = getTickCount;
exports.getVersionMajor = getVersionMajor;
exports.getVersionMinor = getVersionMinor;
exports.getVersionRevision = getVersionRevision;
exports.WINDOW_NORMAL = WINDOW_NORMAL;
exports.WINDOW_AUTOSIZE = WINDOW_AUTOSIZE;
const { WINDOW_OPENGL, WINDOW_FULLSCREEN, WINDOW_FREERATIO, WINDOW_KEEPRATIO, WINDOW_GUI_EXPANDED, WINDOW_GUI_NORMAL, WND_PROP_FULLSCREEN, WND_PROP_AUTOSIZE, WND_PROP_ASPECT_RATIO, WND_PROP_OPENGL, WND_PROP_VISIBLE, WND_PROP_TOPMOST, WND_PROP_VSYNC, EVENT_MOUSEMOVE, EVENT_LBUTTONDOWN } = exports.cv;
exports.WINDOW_OPENGL = WINDOW_OPENGL;
exports.WINDOW_FULLSCREEN = WINDOW_FULLSCREEN;
exports.WINDOW_FREERATIO = WINDOW_FREERATIO;
exports.WINDOW_KEEPRATIO = WINDOW_KEEPRATIO;
exports.WINDOW_GUI_EXPANDED = WINDOW_GUI_EXPANDED;
exports.WINDOW_GUI_NORMAL = WINDOW_GUI_NORMAL;
exports.WND_PROP_FULLSCREEN = WND_PROP_FULLSCREEN;
exports.WND_PROP_AUTOSIZE = WND_PROP_AUTOSIZE;
exports.WND_PROP_ASPECT_RATIO = WND_PROP_ASPECT_RATIO;
exports.WND_PROP_OPENGL = WND_PROP_OPENGL;
exports.WND_PROP_VISIBLE = WND_PROP_VISIBLE;
exports.WND_PROP_TOPMOST = WND_PROP_TOPMOST;
exports.WND_PROP_VSYNC = WND_PROP_VSYNC;
exports.EVENT_MOUSEMOVE = EVENT_MOUSEMOVE;
exports.EVENT_LBUTTONDOWN = EVENT_LBUTTONDOWN;
const { EVENT_RBUTTONDOWN, EVENT_MBUTTONDOWN, EVENT_LBUTTONUP, EVENT_RBUTTONUP, EVENT_MBUTTONUP, EVENT_LBUTTONDBLCLK, EVENT_RBUTTONDBLCLK, EVENT_MBUTTONDBLCLK, EVENT_MOUSEWHEEL, EVENT_MOUSEHWHEEL, EVENT_FLAG_LBUTTON, EVENT_FLAG_RBUTTON, EVENT_FLAG_MBUTTON, EVENT_FLAG_CTRLKEY, EVENT_FLAG_SHIFTKEY } = exports.cv;
exports.EVENT_RBUTTONDOWN = EVENT_RBUTTONDOWN;
exports.EVENT_MBUTTONDOWN = EVENT_MBUTTONDOWN;
exports.EVENT_LBUTTONUP = EVENT_LBUTTONUP;
exports.EVENT_RBUTTONUP = EVENT_RBUTTONUP;
exports.EVENT_MBUTTONUP = EVENT_MBUTTONUP;
exports.EVENT_LBUTTONDBLCLK = EVENT_LBUTTONDBLCLK;
exports.EVENT_RBUTTONDBLCLK = EVENT_RBUTTONDBLCLK;
exports.EVENT_MBUTTONDBLCLK = EVENT_MBUTTONDBLCLK;
exports.EVENT_MOUSEWHEEL = EVENT_MOUSEWHEEL;
exports.EVENT_MOUSEHWHEEL = EVENT_MOUSEHWHEEL;
exports.EVENT_FLAG_LBUTTON = EVENT_FLAG_LBUTTON;
exports.EVENT_FLAG_RBUTTON = EVENT_FLAG_RBUTTON;
exports.EVENT_FLAG_MBUTTON = EVENT_FLAG_MBUTTON;
exports.EVENT_FLAG_CTRLKEY = EVENT_FLAG_CTRLKEY;
exports.EVENT_FLAG_SHIFTKEY = EVENT_FLAG_SHIFTKEY;
const { EVENT_FLAG_ALTKEY, QT_FONT_LIGHT, QT_FONT_NORMAL, QT_FONT_DEMIBOLD, QT_FONT_BOLD, QT_FONT_BLACK, QT_STYLE_NORMAL, QT_STYLE_ITALIC, QT_STYLE_OBLIQUE, QT_PUSH_BUTTON, QT_CHECKBOX, QT_RADIOBOX, QT_NEW_BUTTONBAR, setWindowProperty, getWindowProperty } = exports.cv;
exports.EVENT_FLAG_ALTKEY = EVENT_FLAG_ALTKEY;
exports.QT_FONT_LIGHT = QT_FONT_LIGHT;
exports.QT_FONT_NORMAL = QT_FONT_NORMAL;
exports.QT_FONT_DEMIBOLD = QT_FONT_DEMIBOLD;
exports.QT_FONT_BOLD = QT_FONT_BOLD;
exports.QT_FONT_BLACK = QT_FONT_BLACK;
exports.QT_STYLE_NORMAL = QT_STYLE_NORMAL;
exports.QT_STYLE_ITALIC = QT_STYLE_ITALIC;
exports.QT_STYLE_OBLIQUE = QT_STYLE_OBLIQUE;
exports.QT_PUSH_BUTTON = QT_PUSH_BUTTON;
exports.QT_CHECKBOX = QT_CHECKBOX;
exports.QT_RADIOBOX = QT_RADIOBOX;
exports.QT_NEW_BUTTONBAR = QT_NEW_BUTTONBAR;
exports.setWindowProperty = setWindowProperty;
exports.getWindowProperty = getWindowProperty;
const { setWindowTitle, moveWindow, namedWindow, resizeWindow, startWindowThread, REGULAR, LMEDS, RANSAC, RHO, SOLVEPNP_ITERATIVE, SOLVEPNP_EPNP, SOLVEPNP_P3P, SOLVEPNP_DLS, SOLVEPNP_UPNP, CALIB_CB_ADAPTIVE_THRESH } = exports.cv;
exports.setWindowTitle = setWindowTitle;
exports.moveWindow = moveWindow;
exports.namedWindow = namedWindow;
exports.resizeWindow = resizeWindow;
exports.startWindowThread = startWindowThread;
exports.REGULAR = REGULAR;
exports.LMEDS = LMEDS;
exports.RANSAC = RANSAC;
exports.RHO = RHO;
exports.SOLVEPNP_ITERATIVE = SOLVEPNP_ITERATIVE;
exports.SOLVEPNP_EPNP = SOLVEPNP_EPNP;
exports.SOLVEPNP_P3P = SOLVEPNP_P3P;
exports.SOLVEPNP_DLS = SOLVEPNP_DLS;
exports.SOLVEPNP_UPNP = SOLVEPNP_UPNP;
exports.CALIB_CB_ADAPTIVE_THRESH = CALIB_CB_ADAPTIVE_THRESH;
const { CALIB_CB_NORMALIZE_IMAGE, CALIB_CB_FILTER_QUADS, CALIB_CB_FAST_CHECK, CALIB_CB_SYMMETRIC_GRID, CALIB_CB_ASYMMETRIC_GRID, CALIB_CB_CLUSTERING, CALIB_USE_INTRINSIC_GUESS, CALIB_FIX_ASPECT_RATIO, CALIB_FIX_PRINCIPAL_POINT, CALIB_ZERO_TANGENT_DIST, CALIB_FIX_FOCAL_LENGTH, CALIB_FIX_K1, CALIB_FIX_K2, CALIB_FIX_K3, CALIB_FIX_K4 } = exports.cv;
exports.CALIB_CB_NORMALIZE_IMAGE = CALIB_CB_NORMALIZE_IMAGE;
exports.CALIB_CB_FILTER_QUADS = CALIB_CB_FILTER_QUADS;
exports.CALIB_CB_FAST_CHECK = CALIB_CB_FAST_CHECK;
exports.CALIB_CB_SYMMETRIC_GRID = CALIB_CB_SYMMETRIC_GRID;
exports.CALIB_CB_ASYMMETRIC_GRID = CALIB_CB_ASYMMETRIC_GRID;
exports.CALIB_CB_CLUSTERING = CALIB_CB_CLUSTERING;
exports.CALIB_USE_INTRINSIC_GUESS = CALIB_USE_INTRINSIC_GUESS;
exports.CALIB_FIX_ASPECT_RATIO = CALIB_FIX_ASPECT_RATIO;
exports.CALIB_FIX_PRINCIPAL_POINT = CALIB_FIX_PRINCIPAL_POINT;
exports.CALIB_ZERO_TANGENT_DIST = CALIB_ZERO_TANGENT_DIST;
exports.CALIB_FIX_FOCAL_LENGTH = CALIB_FIX_FOCAL_LENGTH;
exports.CALIB_FIX_K1 = CALIB_FIX_K1;
exports.CALIB_FIX_K2 = CALIB_FIX_K2;
exports.CALIB_FIX_K3 = CALIB_FIX_K3;
exports.CALIB_FIX_K4 = CALIB_FIX_K4;
const { CALIB_FIX_K5, CALIB_FIX_K6, CALIB_RATIONAL_MODEL, CALIB_THIN_PRISM_MODEL, CALIB_FIX_S1_S2_S3_S4, CALIB_FIX_INTRINSIC, CALIB_SAME_FOCAL_LENGTH, CALIB_ZERO_DISPARITY, CALIB_TILTED_MODEL, CALIB_FIX_TAUX_TAUY, CALIB_USE_LU, CALIB_USE_QR, SOLVEPNP_AP3P, SOLVEPNP_MAX_COUNT, CALIB_FIX_TANGENT_DIST } = exports.cv;
exports.CALIB_FIX_K5 = CALIB_FIX_K5;
exports.CALIB_FIX_K6 = CALIB_FIX_K6;
exports.CALIB_RATIONAL_MODEL = CALIB_RATIONAL_MODEL;
exports.CALIB_THIN_PRISM_MODEL = CALIB_THIN_PRISM_MODEL;
exports.CALIB_FIX_S1_S2_S3_S4 = CALIB_FIX_S1_S2_S3_S4;
exports.CALIB_FIX_INTRINSIC = CALIB_FIX_INTRINSIC;
exports.CALIB_SAME_FOCAL_LENGTH = CALIB_SAME_FOCAL_LENGTH;
exports.CALIB_ZERO_DISPARITY = CALIB_ZERO_DISPARITY;
exports.CALIB_TILTED_MODEL = CALIB_TILTED_MODEL;
exports.CALIB_FIX_TAUX_TAUY = CALIB_FIX_TAUX_TAUY;
exports.CALIB_USE_LU = CALIB_USE_LU;
exports.CALIB_USE_QR = CALIB_USE_QR;
exports.SOLVEPNP_AP3P = SOLVEPNP_AP3P;
exports.SOLVEPNP_MAX_COUNT = SOLVEPNP_MAX_COUNT;
exports.CALIB_FIX_TANGENT_DIST = CALIB_FIX_TANGENT_DIST;
const { FM_7POINT, FM_8POINT, FM_LMEDS, FM_RANSAC, findHomography, findHomographyAsync, composeRT, composeRTAsync, solvePnP, solvePnPAsync, solvePnPRansac, solvePnPRansacAsync, projectPoints, projectPointsAsync, initCameraMatrix2D } = exports.cv;
exports.FM_7POINT = FM_7POINT;
exports.FM_8POINT = FM_8POINT;
exports.FM_LMEDS = FM_LMEDS;
exports.FM_RANSAC = FM_RANSAC;
exports.findHomography = findHomography;
exports.findHomographyAsync = findHomographyAsync;
exports.composeRT = composeRT;
exports.composeRTAsync = composeRTAsync;
exports.solvePnP = solvePnP;
exports.solvePnPAsync = solvePnPAsync;
exports.solvePnPRansac = solvePnPRansac;
exports.solvePnPRansacAsync = solvePnPRansacAsync;
exports.projectPoints = projectPoints;
exports.projectPointsAsync = projectPointsAsync;
exports.initCameraMatrix2D = initCameraMatrix2D;
const { initCameraMatrix2DAsync, stereoCalibrate, stereoCalibrateAsync, stereoRectifyUncalibrated, stereoRectifyUncalibratedAsync, findFundamentalMat, findFundamentalMatAsync, findEssentialMat, findEssentialMatAsync, recoverPose, recoverPoseAsync, computeCorrespondEpilines, computeCorrespondEpilinesAsync, getValidDisparityROI, getValidDisparityROIAsync } = exports.cv;
exports.initCameraMatrix2DAsync = initCameraMatrix2DAsync;
exports.stereoCalibrate = stereoCalibrate;
exports.stereoCalibrateAsync = stereoCalibrateAsync;
exports.stereoRectifyUncalibrated = stereoRectifyUncalibrated;
exports.stereoRectifyUncalibratedAsync = stereoRectifyUncalibratedAsync;
exports.findFundamentalMat = findFundamentalMat;
exports.findFundamentalMatAsync = findFundamentalMatAsync;
exports.findEssentialMat = findEssentialMat;
exports.findEssentialMatAsync = findEssentialMatAsync;
exports.recoverPose = recoverPose;
exports.recoverPoseAsync = recoverPoseAsync;
exports.computeCorrespondEpilines = computeCorrespondEpilines;
exports.computeCorrespondEpilinesAsync = computeCorrespondEpilinesAsync;
exports.getValidDisparityROI = getValidDisparityROI;
exports.getValidDisparityROIAsync = getValidDisparityROIAsync;
const { estimateAffine3D, estimateAffine3DAsync, sampsonDistance, sampsonDistanceAsync, calibrateCamera, calibrateCameraAsync, calibrateCameraExtended, calibrateCameraExtendedAsync, estimateAffine2D, estimateAffine2DAsync, estimateAffinePartial2D, estimateAffinePartial2DAsync, solveP3P, solveP3PAsync, undistortPoints } = exports.cv;
exports.estimateAffine3D = estimateAffine3D;
exports.estimateAffine3DAsync = estimateAffine3DAsync;
exports.sampsonDistance = sampsonDistance;
exports.sampsonDistanceAsync = sampsonDistanceAsync;
exports.calibrateCamera = calibrateCamera;
exports.calibrateCameraAsync = calibrateCameraAsync;
exports.calibrateCameraExtended = calibrateCameraExtended;
exports.calibrateCameraExtendedAsync = calibrateCameraExtendedAsync;
exports.estimateAffine2D = estimateAffine2D;
exports.estimateAffine2DAsync = estimateAffine2DAsync;
exports.estimateAffinePartial2D = estimateAffinePartial2D;
exports.estimateAffinePartial2DAsync = estimateAffinePartial2DAsync;
exports.solveP3P = solveP3P;
exports.solveP3PAsync = solveP3PAsync;
exports.undistortPoints = undistortPoints;
const { undistortPointsAsync, DNN_BACKEND_OPENCV, DNN_BACKEND_INFERENCE_ENGINE, DNN_BACKEND_HALIDE, DNN_BACKEND_CUDA, DNN_TARGET_CPU, DNN_TARGET_OPENCL, DNN_TARGET_OPENCL_FP16, DNN_TARGET_MYRIAD, DNN_TARGET_CUDA, DNN_TARGET_CUDA_FP16, DNN_TARGET_HDDL, Net, readNetFromTensorflow, readNetFromTensorflowAsync } = exports.cv;
exports.undistortPointsAsync = undistortPointsAsync;
exports.DNN_BACKEND_OPENCV = DNN_BACKEND_OPENCV;
exports.DNN_BACKEND_INFERENCE_ENGINE = DNN_BACKEND_INFERENCE_ENGINE;
exports.DNN_BACKEND_HALIDE = DNN_BACKEND_HALIDE;
exports.DNN_BACKEND_CUDA = DNN_BACKEND_CUDA;
exports.DNN_TARGET_CPU = DNN_TARGET_CPU;
exports.DNN_TARGET_OPENCL = DNN_TARGET_OPENCL;
exports.DNN_TARGET_OPENCL_FP16 = DNN_TARGET_OPENCL_FP16;
exports.DNN_TARGET_MYRIAD = DNN_TARGET_MYRIAD;
exports.DNN_TARGET_CUDA = DNN_TARGET_CUDA;
exports.DNN_TARGET_CUDA_FP16 = DNN_TARGET_CUDA_FP16;
exports.DNN_TARGET_HDDL = DNN_TARGET_HDDL;
exports.Net = Net;
exports.readNetFromTensorflow = readNetFromTensorflow;
exports.readNetFromTensorflowAsync = readNetFromTensorflowAsync;
const { readNetFromCaffe, readNetFromCaffeAsync, blobFromImage, blobFromImageAsync, blobFromImages, blobFromImagesAsync, readNetFromDarknet, readNetFromDarknetAsync, NMSBoxes, readNetFromONNX, readNetFromONNXAsync, readNet, readNetAsync, EigenFaceRecognizer, FisherFaceRecognizer } = exports.cv;
exports.readNetFromCaffe = readNetFromCaffe;
exports.readNetFromCaffeAsync = readNetFromCaffeAsync;
exports.blobFromImage = blobFromImage;
exports.blobFromImageAsync = blobFromImageAsync;
exports.blobFromImages = blobFromImages;
exports.blobFromImagesAsync = blobFromImagesAsync;
exports.readNetFromDarknet = readNetFromDarknet;
exports.readNetFromDarknetAsync = readNetFromDarknetAsync;
exports.NMSBoxes = NMSBoxes;
exports.readNetFromONNX = readNetFromONNX;
exports.readNetFromONNXAsync = readNetFromONNXAsync;
exports.readNet = readNet;
exports.readNetAsync = readNetAsync;
exports.EigenFaceRecognizer = EigenFaceRecognizer;
exports.FisherFaceRecognizer = FisherFaceRecognizer;
const { LBPHFaceRecognizer, FacemarkAAM, FacemarkAAMData, FacemarkAAMParams, FacemarkLBF, FacemarkLBFParams, KeyPoint, KeyPointMatch, DescriptorMatch, matchFlannBased, matchBruteForce, matchBruteForceL1, matchBruteForceHamming, matchFlannBasedAsync, matchBruteForceAsync } = exports.cv;
exports.LBPHFaceRecognizer = LBPHFaceRecognizer;
exports.FacemarkAAM = FacemarkAAM;
exports.FacemarkAAMData = FacemarkAAMData;
exports.FacemarkAAMParams = FacemarkAAMParams;
exports.FacemarkLBF = FacemarkLBF;
exports.FacemarkLBFParams = FacemarkLBFParams;
exports.KeyPoint = KeyPoint;
exports.KeyPointMatch = KeyPointMatch;
exports.DescriptorMatch = DescriptorMatch;
exports.matchFlannBased = matchFlannBased;
exports.matchBruteForce = matchBruteForce;
exports.matchBruteForceL1 = matchBruteForceL1;
exports.matchBruteForceHamming = matchBruteForceHamming;
exports.matchFlannBasedAsync = matchFlannBasedAsync;
exports.matchBruteForceAsync = matchBruteForceAsync;
const { matchBruteForceL1Async, matchBruteForceHammingAsync, matchBruteForceHammingLut, matchBruteForceSL2, matchBruteForceHammingLutAsync, matchBruteForceSL2Async, matchKnnFlannBased, matchKnnBruteForce, matchKnnBruteForceL1, matchKnnBruteForceHamming, matchKnnFlannBasedAsync, matchKnnBruteForceAsync, matchKnnBruteForceL1Async, matchKnnBruteForceHammingAsync, matchKnnBruteForceHammingLut } = exports.cv;
exports.matchBruteForceL1Async = matchBruteForceL1Async;
exports.matchBruteForceHammingAsync = matchBruteForceHammingAsync;
exports.matchBruteForceHammingLut = matchBruteForceHammingLut;
exports.matchBruteForceSL2 = matchBruteForceSL2;
exports.matchBruteForceHammingLutAsync = matchBruteForceHammingLutAsync;
exports.matchBruteForceSL2Async = matchBruteForceSL2Async;
exports.matchKnnFlannBased = matchKnnFlannBased;
exports.matchKnnBruteForce = matchKnnBruteForce;
exports.matchKnnBruteForceL1 = matchKnnBruteForceL1;
exports.matchKnnBruteForceHamming = matchKnnBruteForceHamming;
exports.matchKnnFlannBasedAsync = matchKnnFlannBasedAsync;
exports.matchKnnBruteForceAsync = matchKnnBruteForceAsync;
exports.matchKnnBruteForceL1Async = matchKnnBruteForceL1Async;
exports.matchKnnBruteForceHammingAsync = matchKnnBruteForceHammingAsync;
exports.matchKnnBruteForceHammingLut = matchKnnBruteForceHammingLut;
const { matchKnnBruteForceSL2, matchKnnBruteForceHammingLutAsync, matchKnnBruteForceSL2Async, AGASTDetector, AGASTDetectorType, AKAZEDetector, AKAZEDescriptorType, BRISKDetector, BFMatcher, FASTDetector, FASTDetectorType, GFTTDetector, KAZEDetector, KAZEDiffusivityType, MSERDetector } = exports.cv;
exports.matchKnnBruteForceSL2 = matchKnnBruteForceSL2;
exports.matchKnnBruteForceHammingLutAsync = matchKnnBruteForceHammingLutAsync;
exports.matchKnnBruteForceSL2Async = matchKnnBruteForceSL2Async;
exports.AGASTDetector = AGASTDetector;
exports.AGASTDetectorType = AGASTDetectorType;
exports.AKAZEDetector = AKAZEDetector;
exports.AKAZEDescriptorType = AKAZEDescriptorType;
exports.BRISKDetector = BRISKDetector;
exports.BFMatcher = BFMatcher;
exports.FASTDetector = FASTDetector;
exports.FASTDetectorType = FASTDetectorType;
exports.GFTTDetector = GFTTDetector;
exports.KAZEDetector = KAZEDetector;
exports.KAZEDiffusivityType = KAZEDiffusivityType;
exports.MSERDetector = MSERDetector;
const { ORBDetector, ORBScoreType, SimpleBlobDetectorParams, SimpleBlobDetector, drawKeyPoints, drawMatches, MORPH_RECT, MORPH_CROSS, MORPH_ELLIPSE, MORPH_ERODE, MORPH_DILATE, MORPH_OPEN, MORPH_CLOSE, MORPH_GRADIENT, MORPH_TOPHAT } = exports.cv;
exports.ORBDetector = ORBDetector;
exports.ORBScoreType = ORBScoreType;
exports.SimpleBlobDetectorParams = SimpleBlobDetectorParams;
exports.SimpleBlobDetector = SimpleBlobDetector;
exports.drawKeyPoints = drawKeyPoints;
exports.drawMatches = drawMatches;
exports.MORPH_RECT = MORPH_RECT;
exports.MORPH_CROSS = MORPH_CROSS;
exports.MORPH_ELLIPSE = MORPH_ELLIPSE;
exports.MORPH_ERODE = MORPH_ERODE;
exports.MORPH_DILATE = MORPH_DILATE;
exports.MORPH_OPEN = MORPH_OPEN;
exports.MORPH_CLOSE = MORPH_CLOSE;
exports.MORPH_GRADIENT = MORPH_GRADIENT;
exports.MORPH_TOPHAT = MORPH_TOPHAT;
const { MORPH_BLACKHAT, MORPH_HITMISS, INTER_NEAREST, INTER_LINEAR, INTER_CUBIC, INTER_AREA, INTER_LANCZOS4, INTER_MAX, INTER_LINEAR_EXACT, WARP_FILL_OUTLIERS, WARP_INVERSE_MAP, THRESH_BINARY, THRESH_BINARY_INV, THRESH_TRUNC, THRESH_TOZERO } = exports.cv;
exports.MORPH_BLACKHAT = MORPH_BLACKHAT;
exports.MORPH_HITMISS = MORPH_HITMISS;
exports.INTER_NEAREST = INTER_NEAREST;
exports.INTER_LINEAR = INTER_LINEAR;
exports.INTER_CUBIC = INTER_CUBIC;
exports.INTER_AREA = INTER_AREA;
exports.INTER_LANCZOS4 = INTER_LANCZOS4;
exports.INTER_MAX = INTER_MAX;
exports.INTER_LINEAR_EXACT = INTER_LINEAR_EXACT;
exports.WARP_FILL_OUTLIERS = WARP_FILL_OUTLIERS;
exports.WARP_INVERSE_MAP = WARP_INVERSE_MAP;
exports.THRESH_BINARY = THRESH_BINARY;
exports.THRESH_BINARY_INV = THRESH_BINARY_INV;
exports.THRESH_TRUNC = THRESH_TRUNC;
exports.THRESH_TOZERO = THRESH_TOZERO;
const { THRESH_TOZERO_INV, THRESH_MASK, THRESH_OTSU, THRESH_TRIANGLE, ADAPTIVE_THRESH_MEAN_C, ADAPTIVE_THRESH_GAUSSIAN_C, GC_BGD, GC_FGD, GC_PR_BGD, GC_PR_FGD, GC_INIT_WITH_RECT, GC_INIT_WITH_MASK, GC_EVAL, TM_SQDIFF, TM_SQDIFF_NORMED } = exports.cv;
exports.THRESH_TOZERO_INV = THRESH_TOZERO_INV;
exports.THRESH_MASK = THRESH_MASK;
exports.THRESH_OTSU = THRESH_OTSU;
exports.THRESH_TRIANGLE = THRESH_TRIANGLE;
exports.ADAPTIVE_THRESH_MEAN_C = ADAPTIVE_THRESH_MEAN_C;
exports.ADAPTIVE_THRESH_GAUSSIAN_C = ADAPTIVE_THRESH_GAUSSIAN_C;
exports.GC_BGD = GC_BGD;
exports.GC_FGD = GC_FGD;
exports.GC_PR_BGD = GC_PR_BGD;
exports.GC_PR_FGD = GC_PR_FGD;
exports.GC_INIT_WITH_RECT = GC_INIT_WITH_RECT;
exports.GC_INIT_WITH_MASK = GC_INIT_WITH_MASK;
exports.GC_EVAL = GC_EVAL;
exports.TM_SQDIFF = TM_SQDIFF;
exports.TM_SQDIFF_NORMED = TM_SQDIFF_NORMED;
const { TM_CCORR, TM_CCORR_NORMED, TM_CCOEFF, TM_CCOEFF_NORMED, DFT_INVERSE, DFT_SCALE, DFT_ROWS, DFT_COMPLEX_OUTPUT, DFT_REAL_OUTPUT, DCT_INVERSE, DCT_ROWS, HOUGH_STANDARD, HOUGH_PROBABILISTIC, HOUGH_MULTI_SCALE, HOUGH_GRADIENT } = exports.cv;
exports.TM_CCORR = TM_CCORR;
exports.TM_CCORR_NORMED = TM_CCORR_NORMED;
exports.TM_CCOEFF = TM_CCOEFF;
exports.TM_CCOEFF_NORMED = TM_CCOEFF_NORMED;
exports.DFT_INVERSE = DFT_INVERSE;
exports.DFT_SCALE = DFT_SCALE;
exports.DFT_ROWS = DFT_ROWS;
exports.DFT_COMPLEX_OUTPUT = DFT_COMPLEX_OUTPUT;
exports.DFT_REAL_OUTPUT = DFT_REAL_OUTPUT;
exports.DCT_INVERSE = DCT_INVERSE;
exports.DCT_ROWS = DCT_ROWS;
exports.HOUGH_STANDARD = HOUGH_STANDARD;
exports.HOUGH_PROBABILISTIC = HOUGH_PROBABILISTIC;
exports.HOUGH_MULTI_SCALE = HOUGH_MULTI_SCALE;
exports.HOUGH_GRADIENT = HOUGH_GRADIENT;
const { HISTCMP_CORREL, HISTCMP_CHISQR, HISTCMP_INTERSECT, HISTCMP_BHATTACHARYYA, HISTCMP_HELLINGER, HISTCMP_CHISQR_ALT, HISTCMP_KL_DIV, FLOODFILL_FIXED_RANGE, FLOODFILL_MASK_ONLY, COLOR_BGR2BGRA, COLOR_RGB2RGBA, COLOR_BGRA2BGR, COLOR_RGBA2RGB, COLOR_BGR2RGBA, COLOR_RGB2BGRA } = exports.cv;
exports.HISTCMP_CORREL = HISTCMP_CORREL;
exports.HISTCMP_CHISQR = HISTCMP_CHISQR;
exports.HISTCMP_INTERSECT = HISTCMP_INTERSECT;
exports.HISTCMP_BHATTACHARYYA = HISTCMP_BHATTACHARYYA;
exports.HISTCMP_HELLINGER = HISTCMP_HELLINGER;
exports.HISTCMP_CHISQR_ALT = HISTCMP_CHISQR_ALT;
exports.HISTCMP_KL_DIV = HISTCMP_KL_DIV;
exports.FLOODFILL_FIXED_RANGE = FLOODFILL_FIXED_RANGE;
exports.FLOODFILL_MASK_ONLY = FLOODFILL_MASK_ONLY;
exports.COLOR_BGR2BGRA = COLOR_BGR2BGRA;
exports.COLOR_RGB2RGBA = COLOR_RGB2RGBA;
exports.COLOR_BGRA2BGR = COLOR_BGRA2BGR;
exports.COLOR_RGBA2RGB = COLOR_RGBA2RGB;
exports.COLOR_BGR2RGBA = COLOR_BGR2RGBA;
exports.COLOR_RGB2BGRA = COLOR_RGB2BGRA;
const { COLOR_RGBA2BGR, COLOR_BGRA2RGB, COLOR_BGR2RGB, COLOR_RGB2BGR, COLOR_BGRA2RGBA, COLOR_RGBA2BGRA, COLOR_BGR2GRAY, COLOR_RGB2GRAY, COLOR_GRAY2BGR, COLOR_GRAY2RGB, COLOR_GRAY2BGRA, COLOR_GRAY2RGBA, COLOR_BGRA2GRAY, COLOR_RGBA2GRAY, COLOR_BGR2BGR565 } = exports.cv;
exports.COLOR_RGBA2BGR = COLOR_RGBA2BGR;
exports.COLOR_BGRA2RGB = COLOR_BGRA2RGB;
exports.COLOR_BGR2RGB = COLOR_BGR2RGB;
exports.COLOR_RGB2BGR = COLOR_RGB2BGR;
exports.COLOR_BGRA2RGBA = COLOR_BGRA2RGBA;
exports.COLOR_RGBA2BGRA = COLOR_RGBA2BGRA;
exports.COLOR_BGR2GRAY = COLOR_BGR2GRAY;
exports.COLOR_RGB2GRAY = COLOR_RGB2GRAY;
exports.COLOR_GRAY2BGR = COLOR_GRAY2BGR;
exports.COLOR_GRAY2RGB = COLOR_GRAY2RGB;
exports.COLOR_GRAY2BGRA = COLOR_GRAY2BGRA;
exports.COLOR_GRAY2RGBA = COLOR_GRAY2RGBA;
exports.COLOR_BGRA2GRAY = COLOR_BGRA2GRAY;
exports.COLOR_RGBA2GRAY = COLOR_RGBA2GRAY;
exports.COLOR_BGR2BGR565 = COLOR_BGR2BGR565;
const { COLOR_RGB2BGR565, COLOR_BGR5652BGR, COLOR_BGR5652RGB, COLOR_BGRA2BGR565, COLOR_RGBA2BGR565, COLOR_BGR5652BGRA, COLOR_BGR5652RGBA, COLOR_GRAY2BGR565, COLOR_BGR5652GRAY, COLOR_BGR2BGR555, COLOR_RGB2BGR555, COLOR_BGR5552BGR, COLOR_BGR5552RGB, COLOR_BGRA2BGR555, COLOR_RGBA2BGR555 } = exports.cv;
exports.COLOR_RGB2BGR565 = COLOR_RGB2BGR565;
exports.COLOR_BGR5652BGR = COLOR_BGR5652BGR;
exports.COLOR_BGR5652RGB = COLOR_BGR5652RGB;
exports.COLOR_BGRA2BGR565 = COLOR_BGRA2BGR565;
exports.COLOR_RGBA2BGR565 = COLOR_RGBA2BGR565;
exports.COLOR_BGR5652BGRA = COLOR_BGR5652BGRA;
exports.COLOR_BGR5652RGBA = COLOR_BGR5652RGBA;
exports.COLOR_GRAY2BGR565 = COLOR_GRAY2BGR565;
exports.COLOR_BGR5652GRAY = COLOR_BGR5652GRAY;
exports.COLOR_BGR2BGR555 = COLOR_BGR2BGR555;
exports.COLOR_RGB2BGR555 = COLOR_RGB2BGR555;
exports.COLOR_BGR5552BGR = COLOR_BGR5552BGR;
exports.COLOR_BGR5552RGB = COLOR_BGR5552RGB;
exports.COLOR_BGRA2BGR555 = COLOR_BGRA2BGR555;
exports.COLOR_RGBA2BGR555 = COLOR_RGBA2BGR555;
const { COLOR_BGR5552BGRA, COLOR_BGR5552RGBA, COLOR_GRAY2BGR555, COLOR_BGR5552GRAY, COLOR_BGR2XYZ, COLOR_RGB2XYZ, COLOR_XYZ2BGR, COLOR_XYZ2RGB, COLOR_BGR2YCrCb, COLOR_RGB2YCrCb, COLOR_YCrCb2BGR, COLOR_YCrCb2RGB, COLOR_BGR2HSV, COLOR_RGB2HSV, COLOR_BGR2Lab } = exports.cv;
exports.COLOR_BGR5552BGRA = COLOR_BGR5552BGRA;
exports.COLOR_BGR5552RGBA = COLOR_BGR5552RGBA;
exports.COLOR_GRAY2BGR555 = COLOR_GRAY2BGR555;
exports.COLOR_BGR5552GRAY = COLOR_BGR5552GRAY;
exports.COLOR_BGR2XYZ = COLOR_BGR2XYZ;
exports.COLOR_RGB2XYZ = COLOR_RGB2XYZ;
exports.COLOR_XYZ2BGR = COLOR_XYZ2BGR;
exports.COLOR_XYZ2RGB = COLOR_XYZ2RGB;
exports.COLOR_BGR2YCrCb = COLOR_BGR2YCrCb;
exports.COLOR_RGB2YCrCb = COLOR_RGB2YCrCb;
exports.COLOR_YCrCb2BGR = COLOR_YCrCb2BGR;
exports.COLOR_YCrCb2RGB = COLOR_YCrCb2RGB;
exports.COLOR_BGR2HSV = COLOR_BGR2HSV;
exports.COLOR_RGB2HSV = COLOR_RGB2HSV;
exports.COLOR_BGR2Lab = COLOR_BGR2Lab;
const { COLOR_RGB2Lab, COLOR_BGR2Luv, COLOR_RGB2Luv, COLOR_BGR2HLS, COLOR_RGB2HLS, COLOR_HSV2BGR, COLOR_HSV2RGB, COLOR_Lab2BGR, COLOR_Lab2RGB, COLOR_Luv2BGR, COLOR_Luv2RGB, COLOR_HLS2BGR, COLOR_HLS2RGB, COLOR_BGR2HSV_FULL, COLOR_RGB2HSV_FULL } = exports.cv;
exports.COLOR_RGB2Lab = COLOR_RGB2Lab;
exports.COLOR_BGR2Luv = COLOR_BGR2Luv;
exports.COLOR_RGB2Luv = COLOR_RGB2Luv;
exports.COLOR_BGR2HLS = COLOR_BGR2HLS;
exports.COLOR_RGB2HLS = COLOR_RGB2HLS;
exports.COLOR_HSV2BGR = COLOR_HSV2BGR;
exports.COLOR_HSV2RGB = COLOR_HSV2RGB;
exports.COLOR_Lab2BGR = COLOR_Lab2BGR;
exports.COLOR_Lab2RGB = COLOR_Lab2RGB;
exports.COLOR_Luv2BGR = COLOR_Luv2BGR;
exports.COLOR_Luv2RGB = COLOR_Luv2RGB;
exports.COLOR_HLS2BGR = COLOR_HLS2BGR;
exports.COLOR_HLS2RGB = COLOR_HLS2RGB;
exports.COLOR_BGR2HSV_FULL = COLOR_BGR2HSV_FULL;
exports.COLOR_RGB2HSV_FULL = COLOR_RGB2HSV_FULL;
const { COLOR_BGR2HLS_FULL, COLOR_RGB2HLS_FULL, COLOR_HSV2BGR_FULL, COLOR_HSV2RGB_FULL, COLOR_HLS2BGR_FULL, COLOR_HLS2RGB_FULL, COLOR_LBGR2Lab, COLOR_LRGB2Lab, COLOR_LBGR2Luv, COLOR_LRGB2Luv, COLOR_Lab2LBGR, COLOR_Lab2LRGB, COLOR_Luv2LBGR, COLOR_Luv2LRGB, COLOR_BGR2YUV } = exports.cv;
exports.COLOR_BGR2HLS_FULL = COLOR_BGR2HLS_FULL;
exports.COLOR_RGB2HLS_FULL = COLOR_RGB2HLS_FULL;
exports.COLOR_HSV2BGR_FULL = COLOR_HSV2BGR_FULL;
exports.COLOR_HSV2RGB_FULL = COLOR_HSV2RGB_FULL;
exports.COLOR_HLS2BGR_FULL = COLOR_HLS2BGR_FULL;
exports.COLOR_HLS2RGB_FULL = COLOR_HLS2RGB_FULL;
exports.COLOR_LBGR2Lab = COLOR_LBGR2Lab;
exports.COLOR_LRGB2Lab = COLOR_LRGB2Lab;
exports.COLOR_LBGR2Luv = COLOR_LBGR2Luv;
exports.COLOR_LRGB2Luv = COLOR_LRGB2Luv;
exports.COLOR_Lab2LBGR = COLOR_Lab2LBGR;
exports.COLOR_Lab2LRGB = COLOR_Lab2LRGB;
exports.COLOR_Luv2LBGR = COLOR_Luv2LBGR;
exports.COLOR_Luv2LRGB = COLOR_Luv2LRGB;
exports.COLOR_BGR2YUV = COLOR_BGR2YUV;
const { COLOR_RGB2YUV, COLOR_YUV2BGR, COLOR_YUV2RGB, COLOR_YUV2RGB_NV12, COLOR_YUV2BGR_NV12, COLOR_YUV2RGB_NV21, COLOR_YUV2BGR_NV21, COLOR_YUV420sp2RGB, COLOR_YUV420sp2BGR, COLOR_YUV2RGBA_NV12, COLOR_YUV2BGRA_NV12, COLOR_YUV2RGBA_NV21, COLOR_YUV2BGRA_NV21, COLOR_YUV420sp2RGBA, COLOR_YUV420sp2BGRA } = exports.cv;
exports.COLOR_RGB2YUV = COLOR_RGB2YUV;
exports.COLOR_YUV2BGR = COLOR_YUV2BGR;
exports.COLOR_YUV2RGB = COLOR_YUV2RGB;
exports.COLOR_YUV2RGB_NV12 = COLOR_YUV2RGB_NV12;
exports.COLOR_YUV2BGR_NV12 = COLOR_YUV2BGR_NV12;
exports.COLOR_YUV2RGB_NV21 = COLOR_YUV2RGB_NV21;
exports.COLOR_YUV2BGR_NV21 = COLOR_YUV2BGR_NV21;
exports.COLOR_YUV420sp2RGB = COLOR_YUV420sp2RGB;
exports.COLOR_YUV420sp2BGR = COLOR_YUV420sp2BGR;
exports.COLOR_YUV2RGBA_NV12 = COLOR_YUV2RGBA_NV12;
exports.COLOR_YUV2BGRA_NV12 = COLOR_YUV2BGRA_NV12;
exports.COLOR_YUV2RGBA_NV21 = COLOR_YUV2RGBA_NV21;
exports.COLOR_YUV2BGRA_NV21 = COLOR_YUV2BGRA_NV21;
exports.COLOR_YUV420sp2RGBA = COLOR_YUV420sp2RGBA;
exports.COLOR_YUV420sp2BGRA = COLOR_YUV420sp2BGRA;
const { COLOR_YUV2RGB_YV12, COLOR_YUV2BGR_YV12, COLOR_YUV2RGB_IYUV, COLOR_YUV2BGR_IYUV, COLOR_YUV2RGB_I420, COLOR_YUV2BGR_I420, COLOR_YUV420p2RGB, COLOR_YUV420p2BGR, COLOR_YUV2RGBA_YV12, COLOR_YUV2BGRA_YV12, COLOR_YUV2RGBA_IYUV, COLOR_YUV2BGRA_IYUV, COLOR_YUV2RGBA_I420, COLOR_YUV2BGRA_I420, COLOR_YUV420p2RGBA } = exports.cv;
exports.COLOR_YUV2RGB_YV12 = COLOR_YUV2RGB_YV12;
exports.COLOR_YUV2BGR_YV12 = COLOR_YUV2BGR_YV12;
exports.COLOR_YUV2RGB_IYUV = COLOR_YUV2RGB_IYUV;
exports.COLOR_YUV2BGR_IYUV = COLOR_YUV2BGR_IYUV;
exports.COLOR_YUV2RGB_I420 = COLOR_YUV2RGB_I420;
exports.COLOR_YUV2BGR_I420 = COLOR_YUV2BGR_I420;
exports.COLOR_YUV420p2RGB = COLOR_YUV420p2RGB;
exports.COLOR_YUV420p2BGR = COLOR_YUV420p2BGR;
exports.COLOR_YUV2RGBA_YV12 = COLOR_YUV2RGBA_YV12;
exports.COLOR_YUV2BGRA_YV12 = COLOR_YUV2BGRA_YV12;
exports.COLOR_YUV2RGBA_IYUV = COLOR_YUV2RGBA_IYUV;
exports.COLOR_YUV2BGRA_IYUV = COLOR_YUV2BGRA_IYUV;
exports.COLOR_YUV2RGBA_I420 = COLOR_YUV2RGBA_I420;
exports.COLOR_YUV2BGRA_I420 = COLOR_YUV2BGRA_I420;
exports.COLOR_YUV420p2RGBA = COLOR_YUV420p2RGBA;
const { COLOR_YUV420p2BGRA, COLOR_YUV2GRAY_420, COLOR_YUV2GRAY_NV21, COLOR_YUV2GRAY_NV12, COLOR_YUV2GRAY_YV12, COLOR_YUV2GRAY_IYUV, COLOR_YUV2GRAY_I420, COLOR_YUV420sp2GRAY, COLOR_YUV420p2GRAY, COLOR_YUV2RGB_UYVY, COLOR_YUV2BGR_UYVY, COLOR_YUV2RGB_Y422, COLOR_YUV2BGR_Y422, COLOR_YUV2RGB_UYNV, COLOR_YUV2BGR_UYNV } = exports.cv;
exports.COLOR_YUV420p2BGRA = COLOR_YUV420p2BGRA;
exports.COLOR_YUV2GRAY_420 = COLOR_YUV2GRAY_420;
exports.COLOR_YUV2GRAY_NV21 = COLOR_YUV2GRAY_NV21;
exports.COLOR_YUV2GRAY_NV12 = COLOR_YUV2GRAY_NV12;
exports.COLOR_YUV2GRAY_YV12 = COLOR_YUV2GRAY_YV12;
exports.COLOR_YUV2GRAY_IYUV = COLOR_YUV2GRAY_IYUV;
exports.COLOR_YUV2GRAY_I420 = COLOR_YUV2GRAY_I420;
exports.COLOR_YUV420sp2GRAY = COLOR_YUV420sp2GRAY;
exports.COLOR_YUV420p2GRAY = COLOR_YUV420p2GRAY;
exports.COLOR_YUV2RGB_UYVY = COLOR_YUV2RGB_UYVY;
exports.COLOR_YUV2BGR_UYVY = COLOR_YUV2BGR_UYVY;
exports.COLOR_YUV2RGB_Y422 = COLOR_YUV2RGB_Y422;
exports.COLOR_YUV2BGR_Y422 = COLOR_YUV2BGR_Y422;
exports.COLOR_YUV2RGB_UYNV = COLOR_YUV2RGB_UYNV;
exports.COLOR_YUV2BGR_UYNV = COLOR_YUV2BGR_UYNV;
const { COLOR_YUV2RGBA_UYVY, COLOR_YUV2BGRA_UYVY, COLOR_YUV2RGBA_Y422, COLOR_YUV2BGRA_Y422, COLOR_YUV2RGBA_UYNV, COLOR_YUV2BGRA_UYNV, COLOR_YUV2RGB_YUY2, COLOR_YUV2BGR_YUY2, COLOR_YUV2RGB_YVYU, COLOR_YUV2BGR_YVYU, COLOR_YUV2RGB_YUYV, COLOR_YUV2BGR_YUYV, COLOR_YUV2RGB_YUNV, COLOR_YUV2BGR_YUNV, COLOR_YUV2RGBA_YUY2 } = exports.cv;
exports.COLOR_YUV2RGBA_UYVY = COLOR_YUV2RGBA_UYVY;
exports.COLOR_YUV2BGRA_UYVY = COLOR_YUV2BGRA_UYVY;
exports.COLOR_YUV2RGBA_Y422 = COLOR_YUV2RGBA_Y422;
exports.COLOR_YUV2BGRA_Y422 = COLOR_YUV2BGRA_Y422;
exports.COLOR_YUV2RGBA_UYNV = COLOR_YUV2RGBA_UYNV;
exports.COLOR_YUV2BGRA_UYNV = COLOR_YUV2BGRA_UYNV;
exports.COLOR_YUV2RGB_YUY2 = COLOR_YUV2RGB_YUY2;
exports.COLOR_YUV2BGR_YUY2 = COLOR_YUV2BGR_YUY2;
exports.COLOR_YUV2RGB_YVYU = COLOR_YUV2RGB_YVYU;
exports.COLOR_YUV2BGR_YVYU = COLOR_YUV2BGR_YVYU;
exports.COLOR_YUV2RGB_YUYV = COLOR_YUV2RGB_YUYV;
exports.COLOR_YUV2BGR_YUYV = COLOR_YUV2BGR_YUYV;
exports.COLOR_YUV2RGB_YUNV = COLOR_YUV2RGB_YUNV;
exports.COLOR_YUV2BGR_YUNV = COLOR_YUV2BGR_YUNV;
exports.COLOR_YUV2RGBA_YUY2 = COLOR_YUV2RGBA_YUY2;
const { COLOR_YUV2BGRA_YUY2, COLOR_YUV2RGBA_YVYU, COLOR_YUV2BGRA_YVYU, COLOR_YUV2RGBA_YUYV, COLOR_YUV2BGRA_YUYV, COLOR_YUV2RGBA_YUNV, COLOR_YUV2BGRA_YUNV, COLOR_YUV2GRAY_UYVY, COLOR_YUV2GRAY_YUY2, COLOR_YUV2GRAY_Y422, COLOR_YUV2GRAY_UYNV, COLOR_YUV2GRAY_YVYU, COLOR_YUV2GRAY_YUYV, COLOR_YUV2GRAY_YUNV, COLOR_RGBA2mRGBA } = exports.cv;
exports.COLOR_YUV2BGRA_YUY2 = COLOR_YUV2BGRA_YUY2;
exports.COLOR_YUV2RGBA_YVYU = COLOR_YUV2RGBA_YVYU;
exports.COLOR_YUV2BGRA_YVYU = COLOR_YUV2BGRA_YVYU;
exports.COLOR_YUV2RGBA_YUYV = COLOR_YUV2RGBA_YUYV;
exports.COLOR_YUV2BGRA_YUYV = COLOR_YUV2BGRA_YUYV;
exports.COLOR_YUV2RGBA_YUNV = COLOR_YUV2RGBA_YUNV;
exports.COLOR_YUV2BGRA_YUNV = COLOR_YUV2BGRA_YUNV;
exports.COLOR_YUV2GRAY_UYVY = COLOR_YUV2GRAY_UYVY;
exports.COLOR_YUV2GRAY_YUY2 = COLOR_YUV2GRAY_YUY2;
exports.COLOR_YUV2GRAY_Y422 = COLOR_YUV2GRAY_Y422;
exports.COLOR_YUV2GRAY_UYNV = COLOR_YUV2GRAY_UYNV;
exports.COLOR_YUV2GRAY_YVYU = COLOR_YUV2GRAY_YVYU;
exports.COLOR_YUV2GRAY_YUYV = COLOR_YUV2GRAY_YUYV;
exports.COLOR_YUV2GRAY_YUNV = COLOR_YUV2GRAY_YUNV;
exports.COLOR_RGBA2mRGBA = COLOR_RGBA2mRGBA;
const { COLOR_mRGBA2RGBA, COLOR_RGB2YUV_I420, COLOR_BGR2YUV_I420, COLOR_RGB2YUV_IYUV, COLOR_BGR2YUV_IYUV, COLOR_RGBA2YUV_I420, COLOR_BGRA2YUV_I420, COLOR_RGBA2YUV_IYUV, COLOR_BGRA2YUV_IYUV, COLOR_RGB2YUV_YV12, COLOR_BGR2YUV_YV12, COLOR_RGBA2YUV_YV12, COLOR_BGRA2YUV_YV12, COLOR_BayerBG2BGR, COLOR_BayerGB2BGR } = exports.cv;
exports.COLOR_mRGBA2RGBA = COLOR_mRGBA2RGBA;
exports.COLOR_RGB2YUV_I420 = COLOR_RGB2YUV_I420;
exports.COLOR_BGR2YUV_I420 = COLOR_BGR2YUV_I420;
exports.COLOR_RGB2YUV_IYUV = COLOR_RGB2YUV_IYUV;
exports.COLOR_BGR2YUV_IYUV = COLOR_BGR2YUV_IYUV;
exports.COLOR_RGBA2YUV_I420 = COLOR_RGBA2YUV_I420;
exports.COLOR_BGRA2YUV_I420 = COLOR_BGRA2YUV_I420;
exports.COLOR_RGBA2YUV_IYUV = COLOR_RGBA2YUV_IYUV;
exports.COLOR_BGRA2YUV_IYUV = COLOR_BGRA2YUV_IYUV;
exports.COLOR_RGB2YUV_YV12 = COLOR_RGB2YUV_YV12;
exports.COLOR_BGR2YUV_YV12 = COLOR_BGR2YUV_YV12;
exports.COLOR_RGBA2YUV_YV12 = COLOR_RGBA2YUV_YV12;
exports.COLOR_BGRA2YUV_YV12 = COLOR_BGRA2YUV_YV12;
exports.COLOR_BayerBG2BGR = COLOR_BayerBG2BGR;
exports.COLOR_BayerGB2BGR = COLOR_BayerGB2BGR;
const { COLOR_BayerRG2BGR, COLOR_BayerGR2BGR, COLOR_BayerBG2RGB, COLOR_BayerGB2RGB, COLOR_BayerRG2RGB, COLOR_BayerGR2RGB, COLOR_BayerBG2GRAY, COLOR_BayerGB2GRAY, COLOR_BayerRG2GRAY, COLOR_BayerGR2GRAY, COLOR_BayerBG2BGR_VNG, COLOR_BayerGB2BGR_VNG, COLOR_BayerRG2BGR_VNG, COLOR_BayerGR2BGR_VNG, COLOR_BayerBG2RGB_VNG } = exports.cv;
exports.COLOR_BayerRG2BGR = COLOR_BayerRG2BGR;
exports.COLOR_BayerGR2BGR = COLOR_BayerGR2BGR;
exports.COLOR_BayerBG2RGB = COLOR_BayerBG2RGB;
exports.COLOR_BayerGB2RGB = COLOR_BayerGB2RGB;
exports.COLOR_BayerRG2RGB = COLOR_BayerRG2RGB;
exports.COLOR_BayerGR2RGB = COLOR_BayerGR2RGB;
exports.COLOR_BayerBG2GRAY = COLOR_BayerBG2GRAY;
exports.COLOR_BayerGB2GRAY = COLOR_BayerGB2GRAY;
exports.COLOR_BayerRG2GRAY = COLOR_BayerRG2GRAY;
exports.COLOR_BayerGR2GRAY = COLOR_BayerGR2GRAY;
exports.COLOR_BayerBG2BGR_VNG = COLOR_BayerBG2BGR_VNG;
exports.COLOR_BayerGB2BGR_VNG = COLOR_BayerGB2BGR_VNG;
exports.COLOR_BayerRG2BGR_VNG = COLOR_BayerRG2BGR_VNG;
exports.COLOR_BayerGR2BGR_VNG = COLOR_BayerGR2BGR_VNG;
exports.COLOR_BayerBG2RGB_VNG = COLOR_BayerBG2RGB_VNG;
const { COLOR_BayerGB2RGB_VNG, COLOR_BayerRG2RGB_VNG, COLOR_BayerGR2RGB_VNG, COLOR_BayerBG2BGR_EA, COLOR_BayerGB2BGR_EA, COLOR_BayerRG2BGR_EA, COLOR_BayerGR2BGR_EA, COLOR_BayerBG2RGB_EA, COLOR_BayerGB2RGB_EA, COLOR_BayerRG2RGB_EA, COLOR_BayerGR2RGB_EA, COLOR_COLORCVT_MAX, CC_STAT_LEFT, CC_STAT_TOP, CC_STAT_WIDTH } = exports.cv;
exports.COLOR_BayerGB2RGB_VNG = COLOR_BayerGB2RGB_VNG;
exports.COLOR_BayerRG2RGB_VNG = COLOR_BayerRG2RGB_VNG;
exports.COLOR_BayerGR2RGB_VNG = COLOR_BayerGR2RGB_VNG;
exports.COLOR_BayerBG2BGR_EA = COLOR_BayerBG2BGR_EA;
exports.COLOR_BayerGB2BGR_EA = COLOR_BayerGB2BGR_EA;
exports.COLOR_BayerRG2BGR_EA = COLOR_BayerRG2BGR_EA;
exports.COLOR_BayerGR2BGR_EA = COLOR_BayerGR2BGR_EA;
exports.COLOR_BayerBG2RGB_EA = COLOR_BayerBG2RGB_EA;
exports.COLOR_BayerGB2RGB_EA = COLOR_BayerGB2RGB_EA;
exports.COLOR_BayerRG2RGB_EA = COLOR_BayerRG2RGB_EA;
exports.COLOR_BayerGR2RGB_EA = COLOR_BayerGR2RGB_EA;
exports.COLOR_COLORCVT_MAX = COLOR_COLORCVT_MAX;
exports.CC_STAT_LEFT = CC_STAT_LEFT;
exports.CC_STAT_TOP = CC_STAT_TOP;
exports.CC_STAT_WIDTH = CC_STAT_WIDTH;
const { CC_STAT_HEIGHT, CC_STAT_AREA, CC_STAT_MAX, CHAIN_APPROX_NONE, CHAIN_APPROX_SIMPLE, CHAIN_APPROX_TC89_L1, CHAIN_APPROX_TC89_KCOS, DIST_USER, DIST_L1, DIST_L2, DIST_C, DIST_L12, DIST_FAIR, DIST_WELSCH, DIST_HUBER } = exports.cv;
exports.CC_STAT_HEIGHT = CC_STAT_HEIGHT;
exports.CC_STAT_AREA = CC_STAT_AREA;
exports.CC_STAT_MAX = CC_STAT_MAX;
exports.CHAIN_APPROX_NONE = CHAIN_APPROX_NONE;
exports.CHAIN_APPROX_SIMPLE = CHAIN_APPROX_SIMPLE;
exports.CHAIN_APPROX_TC89_L1 = CHAIN_APPROX_TC89_L1;
exports.CHAIN_APPROX_TC89_KCOS = CHAIN_APPROX_TC89_KCOS;
exports.DIST_USER = DIST_USER;
exports.DIST_L1 = DIST_L1;
exports.DIST_L2 = DIST_L2;
exports.DIST_C = DIST_C;
exports.DIST_L12 = DIST_L12;
exports.DIST_FAIR = DIST_FAIR;
exports.DIST_WELSCH = DIST_WELSCH;
exports.DIST_HUBER = DIST_HUBER;
const { DIST_MASK_3, DIST_MASK_5, DIST_MASK_PRECISE, DIST_LABEL_CCOMP, DIST_LABEL_PIXEL, RETR_EXTERNAL, RETR_LIST, RETR_CCOMP, RETR_TREE, RETR_FLOODFILL, CONTOURS_MATCH_I1, CONTOURS_MATCH_I2, CONTOURS_MATCH_I3, FONT_HERSHEY_SIMPLEX, FONT_HERSHEY_PLAIN } = exports.cv;
exports.DIST_MASK_3 = DIST_MASK_3;
exports.DIST_MASK_5 = DIST_MASK_5;
exports.DIST_MASK_PRECISE = DIST_MASK_PRECISE;
exports.DIST_LABEL_CCOMP = DIST_LABEL_CCOMP;
exports.DIST_LABEL_PIXEL = DIST_LABEL_PIXEL;
exports.RETR_EXTERNAL = RETR_EXTERNAL;
exports.RETR_LIST = RETR_LIST;
exports.RETR_CCOMP = RETR_CCOMP;
exports.RETR_TREE = RETR_TREE;
exports.RETR_FLOODFILL = RETR_FLOODFILL;
exports.CONTOURS_MATCH_I1 = CONTOURS_MATCH_I1;
exports.CONTOURS_MATCH_I2 = CONTOURS_MATCH_I2;
exports.CONTOURS_MATCH_I3 = CONTOURS_MATCH_I3;
exports.FONT_HERSHEY_SIMPLEX = FONT_HERSHEY_SIMPLEX;
exports.FONT_HERSHEY_PLAIN = FONT_HERSHEY_PLAIN;
const { FONT_HERSHEY_DUPLEX, FONT_HERSHEY_COMPLEX, FONT_HERSHEY_TRIPLEX, FONT_HERSHEY_COMPLEX_SMALL, FONT_HERSHEY_SCRIPT_SIMPLEX, FONT_HERSHEY_SCRIPT_COMPLEX, FONT_ITALIC, FILLED, LINE_4, LINE_8, LINE_AA, COLORMAP_AUTUMN, COLORMAP_BONE, COLORMAP_JET, COLORMAP_WINTER } = exports.cv;
exports.FONT_HERSHEY_DUPLEX = FONT_HERSHEY_DUPLEX;
exports.FONT_HERSHEY_COMPLEX = FONT_HERSHEY_COMPLEX;
exports.FONT_HERSHEY_TRIPLEX = FONT_HERSHEY_TRIPLEX;
exports.FONT_HERSHEY_COMPLEX_SMALL = FONT_HERSHEY_COMPLEX_SMALL;
exports.FONT_HERSHEY_SCRIPT_SIMPLEX = FONT_HERSHEY_SCRIPT_SIMPLEX;
exports.FONT_HERSHEY_SCRIPT_COMPLEX = FONT_HERSHEY_SCRIPT_COMPLEX;
exports.FONT_ITALIC = FONT_ITALIC;
exports.FILLED = FILLED;
exports.LINE_4 = LINE_4;
exports.LINE_8 = LINE_8;
exports.LINE_AA = LINE_AA;
exports.COLORMAP_AUTUMN = COLORMAP_AUTUMN;
exports.COLORMAP_BONE = COLORMAP_BONE;
exports.COLORMAP_JET = COLORMAP_JET;
exports.COLORMAP_WINTER = COLORMAP_WINTER;
const { COLORMAP_RAINBOW, COLORMAP_OCEAN, COLORMAP_SUMMER, COLORMAP_SPRING, COLORMAP_COOL, COLORMAP_HSV, COLORMAP_PINK, COLORMAP_HOT, COLORMAP_PARULA, getStructuringElement, getRotationMatrix2D, plot1DHist, fitLine, getAffineTransform, getPerspectiveTransform } = exports.cv;
exports.COLORMAP_RAINBOW = COLORMAP_RAINBOW;
exports.COLORMAP_OCEAN = COLORMAP_OCEAN;
exports.COLORMAP_SUMMER = COLORMAP_SUMMER;
exports.COLORMAP_SPRING = COLORMAP_SPRING;
exports.COLORMAP_COOL = COLORMAP_COOL;
exports.COLORMAP_HSV = COLORMAP_HSV;
exports.COLORMAP_PINK = COLORMAP_PINK;
exports.COLORMAP_HOT = COLORMAP_HOT;
exports.COLORMAP_PARULA = COLORMAP_PARULA;
exports.getStructuringElement = getStructuringElement;
exports.getRotationMatrix2D = getRotationMatrix2D;
exports.plot1DHist = plot1DHist;
exports.fitLine = fitLine;
exports.getAffineTransform = getAffineTransform;
exports.getPerspectiveTransform = getPerspectiveTransform;
const { getTextSize, getTextSizeAsync, applyColorMap, applyColorMapAsync, canny, cannyAsync, goodFeaturesToTrack, goodFeaturesToTrackAsync, blur, blurAsync, gaussianBlur, gaussianBlurAsync, medianBlur, medianBlurAsync, accumulate } = exports.cv;
exports.getTextSize = getTextSize;
exports.getTextSizeAsync = getTextSizeAsync;
exports.applyColorMap = applyColorMap;
exports.applyColorMapAsync = applyColorMapAsync;
exports.canny = canny;
exports.cannyAsync = cannyAsync;
exports.goodFeaturesToTrack = goodFeaturesToTrack;
exports.goodFeaturesToTrackAsync = goodFeaturesToTrackAsync;
exports.blur = blur;
exports.blurAsync = blurAsync;
exports.gaussianBlur = gaussianBlur;
exports.gaussianBlurAsync = gaussianBlurAsync;
exports.medianBlur = medianBlur;
exports.medianBlurAsync = medianBlurAsync;
exports.accumulate = accumulate;
const { accumulateAsync, accumulateProduct, accumulateProductAsync, accumulateSquare, accumulateSquareAsync, accumulateWeighted, accumulateWeightedAsync, calcHist, calcHistAsync, Moments, Contour, CAP_PROP_POS_MSEC, CAP_PROP_POS_FRAMES, CAP_PROP_POS_AVI_RATIO, CAP_PROP_FRAME_WIDTH } = exports.cv;
exports.accumulateAsync = accumulateAsync;
exports.accumulateProduct = accumulateProduct;
exports.accumulateProductAsync = accumulateProductAsync;
exports.accumulateSquare = accumulateSquare;
exports.accumulateSquareAsync = accumulateSquareAsync;
exports.accumulateWeighted = accumulateWeighted;
exports.accumulateWeightedAsync = accumulateWeightedAsync;
exports.calcHist = calcHist;
exports.calcHistAsync = calcHistAsync;
exports.Moments = Moments;
exports.Contour = Contour;
exports.CAP_PROP_POS_MSEC = CAP_PROP_POS_MSEC;
exports.CAP_PROP_POS_FRAMES = CAP_PROP_POS_FRAMES;
exports.CAP_PROP_POS_AVI_RATIO = CAP_PROP_POS_AVI_RATIO;
exports.CAP_PROP_FRAME_WIDTH = CAP_PROP_FRAME_WIDTH;
const { CAP_PROP_FRAME_HEIGHT, CAP_PROP_FPS, CAP_PROP_FOURCC, CAP_PROP_FRAME_COUNT, CAP_PROP_FORMAT, CAP_PROP_MODE, CAP_PROP_BRIGHTNESS, CAP_PROP_CONTRAST, CAP_PROP_SATURATION, CAP_PROP_HUE, CAP_PROP_GAIN, CAP_PROP_EXPOSURE, CAP_PROP_CONVERT_RGB, CAP_PROP_WHITE_BALANCE_BLUE_U, CAP_PROP_RECTIFICATION } = exports.cv;
exports.CAP_PROP_FRAME_HEIGHT = CAP_PROP_FRAME_HEIGHT;
exports.CAP_PROP_FPS = CAP_PROP_FPS;
exports.CAP_PROP_FOURCC = CAP_PROP_FOURCC;
exports.CAP_PROP_FRAME_COUNT = CAP_PROP_FRAME_COUNT;
exports.CAP_PROP_FORMAT = CAP_PROP_FORMAT;
exports.CAP_PROP_MODE = CAP_PROP_MODE;
exports.CAP_PROP_BRIGHTNESS = CAP_PROP_BRIGHTNESS;
exports.CAP_PROP_CONTRAST = CAP_PROP_CONTRAST;
exports.CAP_PROP_SATURATION = CAP_PROP_SATURATION;
exports.CAP_PROP_HUE = CAP_PROP_HUE;
exports.CAP_PROP_GAIN = CAP_PROP_GAIN;
exports.CAP_PROP_EXPOSURE = CAP_PROP_EXPOSURE;
exports.CAP_PROP_CONVERT_RGB = CAP_PROP_CONVERT_RGB;
exports.CAP_PROP_WHITE_BALANCE_BLUE_U = CAP_PROP_WHITE_BALANCE_BLUE_U;
exports.CAP_PROP_RECTIFICATION = CAP_PROP_RECTIFICATION;
const { CAP_PROP_MONOCHROME, CAP_PROP_SHARPNESS, CAP_PROP_AUTO_EXPOSURE, CAP_PROP_GAMMA, CAP_PROP_TEMPERATURE, CAP_PROP_TRIGGER, CAP_PROP_TRIGGER_DELAY, CAP_PROP_WHITE_BALANCE_RED_V, CAP_PROP_ZOOM, CAP_PROP_FOCUS, CAP_PROP_GUID, CAP_PROP_ISO_SPEED, CAP_PROP_BACKLIGHT, CAP_PROP_PAN, CAP_PROP_TILT } = exports.cv;
exports.CAP_PROP_MONOCHROME = CAP_PROP_MONOCHROME;
exports.CAP_PROP_SHARPNESS = CAP_PROP_SHARPNESS;
exports.CAP_PROP_AUTO_EXPOSURE = CAP_PROP_AUTO_EXPOSURE;
exports.CAP_PROP_GAMMA = CAP_PROP_GAMMA;
exports.CAP_PROP_TEMPERATURE = CAP_PROP_TEMPERATURE;
exports.CAP_PROP_TRIGGER = CAP_PROP_TRIGGER;
exports.CAP_PROP_TRIGGER_DELAY = CAP_PROP_TRIGGER_DELAY;
exports.CAP_PROP_WHITE_BALANCE_RED_V = CAP_PROP_WHITE_BALANCE_RED_V;
exports.CAP_PROP_ZOOM = CAP_PROP_ZOOM;
exports.CAP_PROP_FOCUS = CAP_PROP_FOCUS;
exports.CAP_PROP_GUID = CAP_PROP_GUID;
exports.CAP_PROP_ISO_SPEED = CAP_PROP_ISO_SPEED;
exports.CAP_PROP_BACKLIGHT = CAP_PROP_BACKLIGHT;
exports.CAP_PROP_PAN = CAP_PROP_PAN;
exports.CAP_PROP_TILT = CAP_PROP_TILT;
const { CAP_PROP_ROLL, CAP_PROP_IRIS, CAP_PROP_SETTINGS, CAP_PROP_BUFFERSIZE, CAP_PROP_AUTOFOCUS, CAP_ANY, CAP_VFW, CAP_V4L, CAP_V4L2, CAP_FIREWIRE, CAP_IEEE1394, CAP_DC1394, CAP_CMU1394, CAP_QT, CAP_UNICAP } = exports.cv;
exports.CAP_PROP_ROLL = CAP_PROP_ROLL;
exports.CAP_PROP_IRIS = CAP_PROP_IRIS;
exports.CAP_PROP_SETTINGS = CAP_PROP_SETTINGS;
exports.CAP_PROP_BUFFERSIZE = CAP_PROP_BUFFERSIZE;
exports.CAP_PROP_AUTOFOCUS = CAP_PROP_AUTOFOCUS;
exports.CAP_ANY = CAP_ANY;
exports.CAP_VFW = CAP_VFW;
exports.CAP_V4L = CAP_V4L;
exports.CAP_V4L2 = CAP_V4L2;
exports.CAP_FIREWIRE = CAP_FIREWIRE;
exports.CAP_IEEE1394 = CAP_IEEE1394;
exports.CAP_DC1394 = CAP_DC1394;
exports.CAP_CMU1394 = CAP_CMU1394;
exports.CAP_QT = CAP_QT;
exports.CAP_UNICAP = CAP_UNICAP;
const { CAP_DSHOW, CAP_PVAPI, CAP_OPENNI, CAP_OPENNI_ASUS, CAP_ANDROID, CAP_XIAPI, CAP_AVFOUNDATION, CAP_GIGANETIX, CAP_MSMF, CAP_WINRT, CAP_INTELPERC, CAP_OPENNI2, CAP_OPENNI2_ASUS, CAP_GPHOTO2, CAP_GSTREAMER } = exports.cv;
exports.CAP_DSHOW = CAP_DSHOW;
exports.CAP_PVAPI = CAP_PVAPI;
exports.CAP_OPENNI = CAP_OPENNI;
exports.CAP_OPENNI_ASUS = CAP_OPENNI_ASUS;
exports.CAP_ANDROID = CAP_ANDROID;
exports.CAP_XIAPI = CAP_XIAPI;
exports.CAP_AVFOUNDATION = CAP_AVFOUNDATION;
exports.CAP_GIGANETIX = CAP_GIGANETIX;
exports.CAP_MSMF = CAP_MSMF;
exports.CAP_WINRT = CAP_WINRT;
exports.CAP_INTELPERC = CAP_INTELPERC;
exports.CAP_OPENNI2 = CAP_OPENNI2;
exports.CAP_OPENNI2_ASUS = CAP_OPENNI2_ASUS;
exports.CAP_GPHOTO2 = CAP_GPHOTO2;
exports.CAP_GSTREAMER = CAP_GSTREAMER;
const { CAP_FFMPEG, CAP_IMAGES, CAP_ARAVIS, VIDEOWRITER_PROP_QUALITY, VIDEOWRITER_PROP_FRAMEBYTES, VIDEOWRITER_PROP_NSTRIPES, VideoCapture, VideoWriter, imread, imshow, imshowWait, imwrite, waitKey, waitKeyEx, imencode } = exports.cv;
exports.CAP_FFMPEG = CAP_FFMPEG;
exports.CAP_IMAGES = CAP_IMAGES;
exports.CAP_ARAVIS = CAP_ARAVIS;
exports.VIDEOWRITER_PROP_QUALITY = VIDEOWRITER_PROP_QUALITY;
exports.VIDEOWRITER_PROP_FRAMEBYTES = VIDEOWRITER_PROP_FRAMEBYTES;
exports.VIDEOWRITER_PROP_NSTRIPES = VIDEOWRITER_PROP_NSTRIPES;
exports.VideoCapture = VideoCapture;
exports.VideoWriter = VideoWriter;
exports.imread = imread;
exports.imshow = imshow;
exports.imshowWait = imshowWait;
exports.imwrite = imwrite;
exports.waitKey = waitKey;
exports.waitKeyEx = waitKeyEx;
exports.imencode = imencode;
const { imdecode, destroyWindow, destroyAllWindows, imreadAsync, imwriteAsync, imencodeAsync, imdecodeAsync, IMREAD_UNCHANGED, IMREAD_GRAYSCALE, IMREAD_COLOR, IMREAD_ANYDEPTH, IMREAD_ANYCOLOR, IMREAD_LOAD_GDAL, IMWRITE_JPEG_QUALITY, IMWRITE_JPEG_PROGRESSIVE } = exports.cv;
exports.imdecode = imdecode;
exports.destroyWindow = destroyWindow;
exports.destroyAllWindows = destroyAllWindows;
exports.imreadAsync = imreadAsync;
exports.imwriteAsync = imwriteAsync;
exports.imencodeAsync = imencodeAsync;
exports.imdecodeAsync = imdecodeAsync;
exports.IMREAD_UNCHANGED = IMREAD_UNCHANGED;
exports.IMREAD_GRAYSCALE = IMREAD_GRAYSCALE;
exports.IMREAD_COLOR = IMREAD_COLOR;
exports.IMREAD_ANYDEPTH = IMREAD_ANYDEPTH;
exports.IMREAD_ANYCOLOR = IMREAD_ANYCOLOR;
exports.IMREAD_LOAD_GDAL = IMREAD_LOAD_GDAL;
exports.IMWRITE_JPEG_QUALITY = IMWRITE_JPEG_QUALITY;
exports.IMWRITE_JPEG_PROGRESSIVE = IMWRITE_JPEG_PROGRESSIVE;
const { IMWRITE_JPEG_OPTIMIZE, IMWRITE_JPEG_RST_INTERVAL, IMWRITE_JPEG_LUMA_QUALITY, IMWRITE_JPEG_CHROMA_QUALITY, IMWRITE_PNG_COMPRESSION, IMWRITE_PNG_STRATEGY, IMWRITE_PNG_BILEVEL, IMWRITE_PXM_BINARY, IMWRITE_WEBP_QUALITY, IMREAD_REDUCED_GRAYSCALE_2, IMREAD_REDUCED_COLOR_2, IMREAD_REDUCED_GRAYSCALE_4, IMREAD_REDUCED_COLOR_4, IMREAD_REDUCED_GRAYSCALE_8, IMREAD_REDUCED_COLOR_8 } = exports.cv;
exports.IMWRITE_JPEG_OPTIMIZE = IMWRITE_JPEG_OPTIMIZE;
exports.IMWRITE_JPEG_RST_INTERVAL = IMWRITE_JPEG_RST_INTERVAL;
exports.IMWRITE_JPEG_LUMA_QUALITY = IMWRITE_JPEG_LUMA_QUALITY;
exports.IMWRITE_JPEG_CHROMA_QUALITY = IMWRITE_JPEG_CHROMA_QUALITY;
exports.IMWRITE_PNG_COMPRESSION = IMWRITE_PNG_COMPRESSION;
exports.IMWRITE_PNG_STRATEGY = IMWRITE_PNG_STRATEGY;
exports.IMWRITE_PNG_BILEVEL = IMWRITE_PNG_BILEVEL;
exports.IMWRITE_PXM_BINARY = IMWRITE_PXM_BINARY;
exports.IMWRITE_WEBP_QUALITY = IMWRITE_WEBP_QUALITY;
exports.IMREAD_REDUCED_GRAYSCALE_2 = IMREAD_REDUCED_GRAYSCALE_2;
exports.IMREAD_REDUCED_COLOR_2 = IMREAD_REDUCED_COLOR_2;
exports.IMREAD_REDUCED_GRAYSCALE_4 = IMREAD_REDUCED_GRAYSCALE_4;
exports.IMREAD_REDUCED_COLOR_4 = IMREAD_REDUCED_COLOR_4;
exports.IMREAD_REDUCED_GRAYSCALE_8 = IMREAD_REDUCED_GRAYSCALE_8;
exports.IMREAD_REDUCED_COLOR_8 = IMREAD_REDUCED_COLOR_8;
const { IMREAD_IGNORE_ORIENTATION, IMWRITE_PAM_TUPLETYPE, IMWRITE_PAM_FORMAT_NULL, IMWRITE_PAM_FORMAT_BLACKANDWHITE, IMWRITE_PAM_FORMAT_GRAYSCALE, IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA, IMWRITE_PAM_FORMAT_RGB, IMWRITE_PAM_FORMAT_RGB_ALPHA, IMWRITE_PNG_STRATEGY_DEFAULT, IMWRITE_PNG_STRATEGY_FILTERED, IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY, IMWRITE_PNG_STRATEGY_RLE, IMWRITE_PNG_STRATEGY_FIXED, ml, statModel } = exports.cv;
exports.IMREAD_IGNORE_ORIENTATION = IMREAD_IGNORE_ORIENTATION;
exports.IMWRITE_PAM_TUPLETYPE = IMWRITE_PAM_TUPLETYPE;
exports.IMWRITE_PAM_FORMAT_NULL = IMWRITE_PAM_FORMAT_NULL;
exports.IMWRITE_PAM_FORMAT_BLACKANDWHITE = IMWRITE_PAM_FORMAT_BLACKANDWHITE;
exports.IMWRITE_PAM_FORMAT_GRAYSCALE = IMWRITE_PAM_FORMAT_GRAYSCALE;
exports.IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA = IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA;
exports.IMWRITE_PAM_FORMAT_RGB = IMWRITE_PAM_FORMAT_RGB;
exports.IMWRITE_PAM_FORMAT_RGB_ALPHA = IMWRITE_PAM_FORMAT_RGB_ALPHA;
exports.IMWRITE_PNG_STRATEGY_DEFAULT = IMWRITE_PNG_STRATEGY_DEFAULT;
exports.IMWRITE_PNG_STRATEGY_FILTERED = IMWRITE_PNG_STRATEGY_FILTERED;
exports.IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY;
exports.IMWRITE_PNG_STRATEGY_RLE = IMWRITE_PNG_STRATEGY_RLE;
exports.IMWRITE_PNG_STRATEGY_FIXED = IMWRITE_PNG_STRATEGY_FIXED;
exports.ml = ml;
exports.statModel = statModel;
const { TrainData, ParamGrid, StatModel, SVM, CascadeClassifier, HOGDescriptor, HOGHistogramNormType, DetectionROI, INPAINT_NS, INPAINT_TELEA, NORMAL_CLONE, MIXED_CLONE, MONOCHROME_TRANSFER, fastNlMeansDenoisingColored, fastNlMeansDenoisingColoredAsync } = exports.cv;
exports.TrainData = TrainData;
exports.ParamGrid = ParamGrid;
exports.StatModel = StatModel;
exports.SVM = SVM;
exports.CascadeClassifier = CascadeClassifier;
exports.HOGDescriptor = HOGDescriptor;
exports.HOGHistogramNormType = HOGHistogramNormType;
exports.DetectionROI = DetectionROI;
exports.INPAINT_NS = INPAINT_NS;
exports.INPAINT_TELEA = INPAINT_TELEA;
exports.NORMAL_CLONE = NORMAL_CLONE;
exports.MIXED_CLONE = MIXED_CLONE;
exports.MONOCHROME_TRANSFER = MONOCHROME_TRANSFER;
exports.fastNlMeansDenoisingColored = fastNlMeansDenoisingColored;
exports.fastNlMeansDenoisingColoredAsync = fastNlMeansDenoisingColoredAsync;
const { inpaint, inpaintAsync, seamlessClone, seamlessCloneAsync, OCRHMMDecoder, OCRHMMClassifier, loadOCRHMMClassifierNM, loadOCRHMMClassifierNMAsync, loadOCRHMMClassifierCNN, loadOCRHMMClassifierCNNAsync, createOCRHMMTransitionsTable, createOCRHMMTransitionsTableAsync, TrackerBoostingParams, TrackerBoosting, TrackerMedianFlow } = exports.cv;
exports.inpaint = inpaint;
exports.inpaintAsync = inpaintAsync;
exports.seamlessClone = seamlessClone;
exports.seamlessCloneAsync = seamlessCloneAsync;
exports.OCRHMMDecoder = OCRHMMDecoder;
exports.OCRHMMClassifier = OCRHMMClassifier;
exports.loadOCRHMMClassifierNM = loadOCRHMMClassifierNM;
exports.loadOCRHMMClassifierNMAsync = loadOCRHMMClassifierNMAsync;
exports.loadOCRHMMClassifierCNN = loadOCRHMMClassifierCNN;
exports.loadOCRHMMClassifierCNNAsync = loadOCRHMMClassifierCNNAsync;
exports.createOCRHMMTransitionsTable = createOCRHMMTransitionsTable;
exports.createOCRHMMTransitionsTableAsync = createOCRHMMTransitionsTableAsync;
exports.TrackerBoostingParams = TrackerBoostingParams;
exports.TrackerBoosting = TrackerBoosting;
exports.TrackerMedianFlow = TrackerMedianFlow;
const { TrackerMILParams, TrackerMIL, TrackerTLD, TrackerKCFParams, TrackerKCF, MultiTracker, trackerKCFModes, TrackerGOTURN, TrackerMOSSE, TrackerCSRTParams, TrackerCSRT, BackgroundSubtractorMOG2, BackgroundSubtractorKNN, SIFTDetector, SURFDetector } = exports.cv;
exports.TrackerMILParams = TrackerMILParams;
exports.TrackerMIL = TrackerMIL;
exports.TrackerTLD = TrackerTLD;
exports.TrackerKCFParams = TrackerKCFParams;
exports.TrackerKCF = TrackerKCF;
exports.MultiTracker = MultiTracker;
exports.trackerKCFModes = trackerKCFModes;
exports.TrackerGOTURN = TrackerGOTURN;
exports.TrackerMOSSE = TrackerMOSSE;
exports.TrackerCSRTParams = TrackerCSRTParams;
exports.TrackerCSRT = TrackerCSRT;
exports.BackgroundSubtractorMOG2 = BackgroundSubtractorMOG2;
exports.BackgroundSubtractorKNN = BackgroundSubtractorKNN;
exports.SIFTDetector = SIFTDetector;
exports.SURFDetector = SURFDetector;
const { SuperpixelSEEDS, SuperpixelSLIC, SuperpixelLSC, SLIC, SLICO, PHash, HAAR_EYE, HAAR_EYE_TREE_EYEGLASSES, HAAR_FRONTALCATFACE, HAAR_FRONTALCATFACE_EXTENDED, HAAR_FRONTALFACE_ALT, HAAR_FRONTALFACE_ALT2, HAAR_FRONTALFACE_ALT_TREE, HAAR_FRONTALFACE_DEFAULT, HAAR_FULLBODY } = exports.cv;
exports.SuperpixelSEEDS = SuperpixelSEEDS;
exports.SuperpixelSLIC = SuperpixelSLIC;
exports.SuperpixelLSC = SuperpixelLSC;
exports.SLIC = SLIC;
exports.SLICO = SLICO;
exports.PHash = PHash;
exports.HAAR_EYE = HAAR_EYE;
exports.HAAR_EYE_TREE_EYEGLASSES = HAAR_EYE_TREE_EYEGLASSES;
exports.HAAR_FRONTALCATFACE = HAAR_FRONTALCATFACE;
exports.HAAR_FRONTALCATFACE_EXTENDED = HAAR_FRONTALCATFACE_EXTENDED;
exports.HAAR_FRONTALFACE_ALT = HAAR_FRONTALFACE_ALT;
exports.HAAR_FRONTALFACE_ALT2 = HAAR_FRONTALFACE_ALT2;
exports.HAAR_FRONTALFACE_ALT_TREE = HAAR_FRONTALFACE_ALT_TREE;
exports.HAAR_FRONTALFACE_DEFAULT = HAAR_FRONTALFACE_DEFAULT;
exports.HAAR_FULLBODY = HAAR_FULLBODY;
const { HAAR_LEFTEYE_2SPLITS, HAAR_LICENCE_PLATE_RUS_16STAGES, HAAR_LOWERBODY, HAAR_PROFILEFACE, HAAR_RIGHTEYE_2SPLITS, HAAR_RUSSIAN_PLATE_NUMBER, HAAR_SMILE, HAAR_UPPERBODY, LBP_FRONTALCATFACE, LBP_FRONTALFACE, LBP_FRONTALFACE_IMPROVED, LBP_PROFILEFACE, LBP_SILVERWARE, drawTextBox, drawDetection } = exports.cv;
exports.HAAR_LEFTEYE_2SPLITS = HAAR_LEFTEYE_2SPLITS;
exports.HAAR_LICENCE_PLATE_RUS_16STAGES = HAAR_LICENCE_PLATE_RUS_16STAGES;
exports.HAAR_LOWERBODY = HAAR_LOWERBODY;
exports.HAAR_PROFILEFACE = HAAR_PROFILEFACE;
exports.HAAR_RIGHTEYE_2SPLITS = HAAR_RIGHTEYE_2SPLITS;
exports.HAAR_RUSSIAN_PLATE_NUMBER = HAAR_RUSSIAN_PLATE_NUMBER;
exports.HAAR_SMILE = HAAR_SMILE;
exports.HAAR_UPPERBODY = HAAR_UPPERBODY;
exports.LBP_FRONTALCATFACE = LBP_FRONTALCATFACE;
exports.LBP_FRONTALFACE = LBP_FRONTALFACE;
exports.LBP_FRONTALFACE_IMPROVED = LBP_FRONTALFACE_IMPROVED;
exports.LBP_PROFILEFACE = LBP_PROFILEFACE;
exports.LBP_SILVERWARE = LBP_SILVERWARE;
exports.drawTextBox = drawTextBox;
exports.drawDetection = drawDetection;
const { getVersion, getVersionString, toMatTypeName, getScoreMax, dropOverlappingZone } = exports.cv;
exports.getVersion = getVersion;
exports.getVersionString = getVersionString;
exports.toMatTypeName = toMatTypeName;
exports.getScoreMax = getScoreMax;
exports.dropOverlappingZone = dropOverlappingZone;
// TODO FIX this export mess
exports.AGAST = exports.cv['"AGAST"'];
exports.AKAZE = exports.cv['"AKAZE"'];
exports.KAZE = exports.cv['"KAZE"'];
exports.FAST = exports.cv['"FAST"'];
exports.ORB = exports.cv['"ORB"'];
exports.default = exports.cv;
