"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const dntShim = __importStar(require("./_dnt.shims.js"));
const deps_js_1 = require("./deps.js");
const { open, close, stat } = dntShim.Deno;
/**
 * Writable class
 */
class Writable {
    /**
     * Writable constructor
     * @param path
     */
    constructor(path) {
        Object.defineProperty(this, "file", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "path", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "currentSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        this.path = path;
    }
    /**
     * Setup writable file
     */
    async setup() {
        this.file = await open(this.path, {
            create: true,
            append: true,
            write: true,
        });
        this.currentSize = (await stat(this.path)).size;
    }
    /**
     * Write message to file
     * @param msg
     */
    async write(msg) {
        await (0, deps_js_1.writeAll)(this.file, msg);
        this.currentSize += msg.byteLength;
    }
    /**
     * Close file
     */
    close() {
        // this.file.close();
        close(this.file.rid);
    }
}
exports.default = Writable;
